{"version":3,"sources":["msf:///msf-2.0.22.min.js?","msf:///webpack/bootstrap 920ed9b37c25594f7874?","msf:///./index.js?","msf:///./lib/msf.js?","msf:///./lib/EventEmitter.js?","msf:///./lib/Service.js?","msf:///./lib/Search.js?","msf:///./lib/util/index.js?","msf:///./lib/Application.js?","msf:///./lib/Channel.js?","msf:///./lib/util/logger.js?","msf:///./lib/util/url.js?","msf:///./lib/util/inherits.js?","msf:///./lib/util/props.js?","msf:///./lib/util/types.js?","msf:///./lib/util/querystring.js?","msf:///./lib/Client.js?","msf:///./lib/ClientList.js?"],"names":["msf","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","version","undefined","util","Service","Search","search","logger","callback","once","services","setTimeout","start","local","getLocal","remote","uri","getByURI","EventEmitter","this","_events","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","prototype","_disabledEvents","defaultMaxListeners","setMaxListeners","n","isNaN","TypeError","emit","type","er","handler","len","args","i","listeners","error","length","arguments","Error","Array","apply","slice","r","addListener","listener","newListener","push","warned","console","trace","on","g","removeListener","fired","list","position","splice","off","removeAllListeners","key","ret","disableEvent","enableEvent","listenerCount","emitter","description","name","device","props","readOnly","Application","Channel","application","channelUri","channel","oReq","XMLHttpRequest","timeout","ontimeout","onload","status","result","JSON","parse","responseText","e","open","send","super_","discoveryFrame","STATUS_STOPPED","self","frame","document","createElement","setAttribute","style","display","src","body","appendChild","windowMessageListener","event","source","contentWindow","data","onSearchReady","results","onSearchResult","onSearchError","window","addEventListener","inherits","STATUS_STARTED","postMessage","method","onSearchStart","warn","stop","onSearchStop","url","types","queryString","service","channelURI","isString","match","TYPE_WEB_APP","TYPE_APP","client","isHost","disconnect","bind","connect","attributes","err","connected","readyHandler","debug","exitOnRemote","clients","stopCallback","invoke","install","req","code","statusText","setRequestHeader","stringify","oServiceUrl","clientId","connection","resultHandlers","connectionUrl","host","pathname","pingTimeout","pingInterval","ClientList","Object","defineProperty","get","set","isConnected","startHealthCheck","stopHealthCheck","Client","EVENT_HEALTH_CHECK","connectCallback","u","onopen","onerror","onclose","onmessage","WebSocket","binaryType","_onSocketOpen","_onSocketError","_onSocketClose","_onSocketMessage","close","publish","message","target","payload","silly","isArray","to","packMessage","oMsg","msg","msgByteLength","Blob","size","hBuff","ArrayBuffer","hView","DataView","setUint16","unpackMessage","buffer","json","view","msgByteLen","getUint16","String","fromCharCode","getUint8","params","isNotification","Date","now","_onConnect","forEach","clientInfo","me","_onDisconnect","clear","_onClientConnect","_onClientDisconnect","getById","remove","_onReady","_onUserEvent","from","unpacked","lastReceivedPing","sent","checkAndPing","setInterval","clearInterval","createLevel","level","unshift","log","levels","indexOf","toUpperCase","isValid","pattern","oUrl","parser","href","protocol","hostname","port","hash","create","ctor","superCtor","constructor","value","enumerable","writable","configurable","TempCtor","createDescriptor","w","v","obj","k","private","isNull","isBoolean","str","trim","replace","split","reduce","param","parts","val","decodeURIComponent","hasOwnProperty","keys","map","val2","encodeURIComponent","join","connectTime","freeze","item"],"mappings":"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","file":"msf-2.0.22.min.js","sourcesContent":["var msf =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\tvar msf = __webpack_require__(1);\n\n\tmsf.version = '{{version}}';\n\n\tif (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return msf; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && module.exports) {\n\t    module.exports = msf;\n\t} else {\n\t    window.msf = msf;\n\t}\n\n\tmodule.exports = msf;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util = __webpack_require__(5);\n\tvar EventEmitter = __webpack_require__(2);\n\tvar Service = __webpack_require__(3);\n\tvar Search = __webpack_require__(4);\n\n\t// We will use a singleton for search so that we don't create multiple frames in the page\n\tvar search = null;\n\n\n\t/**\n\t * The 'msf' module/object is the entry point for the API.\n\t * If including the library via script tag it will be a global object attached to the window\n\t * or the export of the module if using amd/commonjs (requirejs/browserify)\n\t *\n\t * @module msf\n\t *\n\t */\n\n\n\t/*\n\t Can be used to debug if there is an issue\n\t msf.logger.level = 'error'|'warn'|'info'|'verbose'|'debug'|'silly'\n\t */\n\tmodule.exports.logger  = util.logger;\n\n\n\t/**\n\t * Searches the local network for compatible multiscreen services\n\t *\n\t * @param {Function} [callback] If a callback is passed the search is immediately started.\n\t * @param {Error} callback.err The callback handler\n\t * @param {Service[]} callback.result An array of {@link Service} instances found on the network\n\t * @returns {Search} A search instance (a singleton is used to reduce page resources)\n\t *\n\t * @example\n\t * msf.search(function(err, services){\n\t *   if(err) return console.error('something went wrong', err.message);\n\t *   console.log('found '+services.length+' services');\n\t * }\n\t *\n\t * // OR\n\t *\n\t * var search = msf.search();\n\t * search.on('found', function(service){\n\t *    console.log('found service '+service.name);\n\t * }\n\t * search.start();\n\t *\n\t */\n\tmodule.exports.search = function(callback){\n\n\t    // Create the single instance if we don't already have one\n\t    if(!search) search = new Search();\n\n\t    // If there is a callback defined, listen once for results and start the search\n\t    if(callback) {\n\t        search.once('found',function(services){\n\t            callback(null, services);\n\t        });\n\n\t        // start on next tick to support search callbacks and events\n\t        setTimeout(function(){ search.start(); },0);\n\n\t    }\n\n\t    return search;\n\n\t};\n\n\n\t/**\n\t * Retrieves a reference to the service running on the current device. This is typically only used on the 'host' device.\n\t *\n\t * @param {Function} callback The callback handler\n\t * @param {Error} callback.error\n\t * @param {Service} callback.service The service instance\n\t *\n\t * @example\n\t * msf.local(function(err, service){\n\t *   console.log('my service name is '+service.name);\n\t * }\n\t */\n\tmodule.exports.local = function(callback){\n\n\t    Service.getLocal(callback);\n\n\t};\n\n\t/**\n\t * Retrieves a service instance by it's uri\n\t *\n\t * @param {String} uri The uri of the service (http://host:port/api/v2/)\n\t * @param {Function} callback The callback handler\n\t * @param {Error} callback.error\n\t * @param {Service} callback.service The service instance\n\t *\n\t * @example\n\t * msf.remote('http://host:port/api/v2/',function(err, service){\n\t *   console.log('the service name is '+service.name);\n\t * }\n\t */\n\tmodule.exports.remote = function(uri, callback){\n\n\t    Service.getByURI(uri, callback);\n\n\t};\n\n\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* jshint newcap: false, -W040: false, -W004: false, -W003 : false */\n\t\"use strict\";\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\t/**\n\t * All objects which emit events are instances of EventEmitter.\n\t * The EventEmitter class is derived from the nodejs EventEmitter.\n\t *\n\t * For simplicity only the most used members are documented here, for full documentation read {@link http://nodejs.org/api/events.html}\n\t * @class EventEmitter\n\t * @hide-constructor\n\t */\n\tfunction EventEmitter() {\n\t this._events = this._events || {};\n\t this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\n\tEventEmitter.prototype._disabledEvents = {};\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t if (!isNumber(n) || n < 0 || isNaN(n))\n\t  throw TypeError('n must be a positive number');\n\t this._maxListeners = n;\n\t return this;\n\t};\n\n\tEventEmitter.prototype.emit = function(type) {\n\t var er, handler, len, args, i, listeners;\n\n\t if (!this._events){\n\t     this._events = {};\n\t }\n\n\t if(this._disabledEvents[type]) return false;\n\n\t // If there is no 'error' event listener then throw.\n\t if (type === 'error') {\n\t  if (!this._events.error ||\n\t      (isObject(this._events.error) && !this._events.error.length)) {\n\t   er = arguments[1];\n\t   if (er instanceof Error) {\n\t    throw er; // Unhandled 'error' event\n\t   }\n\t   throw TypeError('Uncaught, unspecified \"error\" event.');\n\t  }\n\t }\n\n\t handler = this._events[type];\n\n\t if (isUndefined(handler))\n\t  return false;\n\n\t if (isFunction(handler)) {\n\t  switch (arguments.length) {\n\t   // fast cases\n\t   case 1:\n\t    handler.call(this);\n\t    break;\n\t   case 2:\n\t    handler.call(this, arguments[1]);\n\t    break;\n\t   case 3:\n\t    handler.call(this, arguments[1], arguments[2]);\n\t    break;\n\t   // slower\n\t   default:\n\t    len = arguments.length;\n\t    args = new Array(len - 1);\n\t    for (i = 1; i < len; i++)\n\t     args[i - 1] = arguments[i];\n\t    handler.apply(this, args);\n\t  }\n\t } else if (isObject(handler)) {\n\t  len = arguments.length;\n\t  args = new Array(len - 1);\n\t  for (i = 1; i < len; i++)\n\t   args[i - 1] = arguments[i];\n\n\t  listeners = handler.slice();\n\t  len = listeners.length;\n\t  for (i = 0; i < len; i++){\n\t      // a small hack put in to be able to stop event emission\n\t      var r = listeners[i].apply(this, args);\n\t      if(r === 'stopEvent') break;\n\t  }\n\n\t }\n\n\t return true;\n\t};\n\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t var m;\n\n\t if (!isFunction(listener))\n\t  throw TypeError('listener must be a function');\n\n\t if (!this._events)\n\t  this._events = {};\n\n\t // To avoid recursion in the case that type === \"newListener\"! Before\n\t // adding it to the listeners, first emit \"newListener\".\n\t if (this._events.newListener)\n\t  this.emit('newListener', type,\n\t      isFunction(listener.listener) ?\n\t          listener.listener : listener);\n\n\t if (!this._events[type])\n\t // Optimize the case of one listener. Don't need the extra array object.\n\t  this._events[type] = listener;\n\t else if (isObject(this._events[type]))\n\t // If we've already got an array, just append.\n\t  this._events[type].push(listener);\n\t else\n\t // Adding the second element, need to change to array.\n\t  this._events[type] = [this._events[type], listener];\n\n\t // Check for listener leak\n\t if (isObject(this._events[type]) && !this._events[type].warned) {\n\t  var m;\n\t  if (!isUndefined(this._maxListeners)) {\n\t   m = this._maxListeners;\n\t  } else {\n\t   m = EventEmitter.defaultMaxListeners;\n\t  }\n\n\t  if (m && m > 0 && this._events[type].length > m) {\n\t   this._events[type].warned = true;\n\t   console.error('(node) warning: possible EventEmitter memory ' +\n\t       'leak detected. %d listeners added. ' +\n\t       'Use emitter.setMaxListeners() to increase limit.',\n\t       this._events[type].length);\n\t   if (typeof console.trace === 'function') {\n\t    // not supported in IE 10\n\t    console.trace();\n\t   }\n\t  }\n\t }\n\n\t return this;\n\t};\n\n\t/**\n\t * Adds a listener for the event.\n\t * @param {String} type The event name to listen to\n\t * @param {Function} listener The function to invoke when the event occurs\n\t * @returns EventEmitter\n\t *\n\t */\n\tEventEmitter.prototype.on = function(type, listener){\n\t    EventEmitter.prototype.addListener.apply(this,arguments);\n\t};\n\n\t/**\n\t * Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed.\n\t * @param {String} type The event name to listen to\n\t * @param {Function} listener The function to invoke when the event occurs\n\t * @returns EventEmitter\n\t *\n\t */\n\tEventEmitter.prototype.once = function(type, listener) {\n\t if (!isFunction(listener))\n\t  throw TypeError('listener must be a function');\n\n\t var fired = false;\n\n\t function g() {\n\t  this.removeListener(type, g);\n\n\t  if (!fired) {\n\t   fired = true;\n\t   listener.apply(this, arguments);\n\t  }\n\t }\n\n\t g.listener = listener;\n\t this.on(type, g);\n\n\t return this;\n\t};\n\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t var list, position, length, i;\n\n\t if (!isFunction(listener))\n\t  throw TypeError('listener must be a function');\n\n\t if (!this._events || !this._events[type])\n\t  return this;\n\n\t list = this._events[type];\n\t length = list.length;\n\t position = -1;\n\n\t if (list === listener ||\n\t     (isFunction(list.listener) && list.listener === listener)) {\n\t  delete this._events[type];\n\t  if (this._events.removeListener)\n\t   this.emit('removeListener', type, listener);\n\n\t } else if (isObject(list)) {\n\t  for (i = length; i-- > 0;) {\n\t   if (list[i] === listener ||\n\t       (list[i].listener && list[i].listener === listener)) {\n\t    position = i;\n\t    break;\n\t   }\n\t  }\n\n\t  if (position < 0)\n\t   return this;\n\n\t  if (list.length === 1) {\n\t   list.length = 0;\n\t   delete this._events[type];\n\t  } else {\n\t   list.splice(position, 1);\n\t  }\n\n\t  if (this._events.removeListener)\n\t   this.emit('removeListener', type, listener);\n\t }\n\n\t return this;\n\t};\n\n\t/**\n\t * Alias for removeListener\n\t * @param {String} type The event name to stop listening to\n\t * @param {Function} listener The function that was originally add to handle the event\n\t * @returns EventEmitter\n\t *\n\t */\n\tEventEmitter.prototype.off = function(type, listener){\n\t    EventEmitter.prototype.removeListener.apply(this,arguments);\n\t};\n\n\n\t/**\n\t * Removes all listeners, or those of the specified event.\n\t * @param {String} event The event name to stop listening to\n\t * @returns EventEmitter\n\t *\n\t */\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t var key, listeners;\n\n\t if (!this._events)\n\t  return this;\n\n\t // not listening for removeListener, no need to emit\n\t if (!this._events.removeListener) {\n\t  if (arguments.length === 0)\n\t   this._events = {};\n\t  else if (this._events[type])\n\t   delete this._events[type];\n\t  return this;\n\t }\n\n\t // emit removeListener for all listeners on all events\n\t if (arguments.length === 0) {\n\t  for (key in this._events) {\n\t   if (key === 'removeListener') continue;\n\t   this.removeAllListeners(key);\n\t  }\n\t  this.removeAllListeners('removeListener');\n\t  this._events = {};\n\t  return this;\n\t }\n\n\t listeners = this._events[type];\n\n\t if (isFunction(listeners)) {\n\t  this.removeListener(type, listeners);\n\t } else {\n\t  // LIFO order\n\t  while (listeners.length)\n\t   this.removeListener(type, listeners[listeners.length - 1]);\n\t }\n\t delete this._events[type];\n\n\t return this;\n\t};\n\n\tEventEmitter.prototype.listeners = function(type) {\n\t var ret;\n\t if (!this._events || !this._events[type])\n\t  ret = [];\n\t else if (isFunction(this._events[type]))\n\t  ret = [this._events[type]];\n\t else\n\t  ret = this._events[type].slice();\n\t return ret;\n\t};\n\n\tEventEmitter.prototype.disableEvent = function(type) {\n\t    if(type && typeof type === 'string'){\n\t        this._disabledEvents[type] = true;\n\t    }\n\t};\n\n\tEventEmitter.prototype.enableEvent = function(type) {\n\t    if(type && typeof type === 'string'){\n\t        delete this._disabledEvents[type];\n\t    }\n\t};\n\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t var ret;\n\t if (!emitter._events || !emitter._events[type])\n\t  ret = 0;\n\t else if (isFunction(emitter._events[type]))\n\t  ret = 1;\n\t else\n\t  ret = emitter._events[type].length;\n\t return ret;\n\t};\n\n\tfunction isFunction(arg) {\n\t return typeof arg === 'function';\n\t}\n\n\tfunction isNumber(arg) {\n\t return typeof arg === 'number';\n\t}\n\n\tfunction isObject(arg) {\n\t return typeof arg === 'object' && arg !== null;\n\t}\n\n\tfunction isUndefined(arg) {\n\t return arg === void 0;\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util = __webpack_require__(5);\n\tvar props = util.props;\n\tvar Application = __webpack_require__(6);\n\tvar Channel = __webpack_require__(7);\n\n\n\t/**\n\t * A Service instance represents the multiscreen service running on the remote device, such as a SmartTV\n\t *\n\t * @class Service\n\t * @hide-constructor\n\t *\n\t */\n\n\tfunction Service(description){\n\n\t    /**\n\t     * The id of the service\n\t     *\n\t     * @member {String} Service#id\n\t     * @readonly\n\t     */\n\t    this.id = description.id;\n\n\t    /**\n\t     * The name of the service (Living Room TV)\n\t     *\n\t     * @member {String} Service#name\n\t     * @readonly\n\t     */\n\t    this.name = description.name;\n\n\t    /**\n\t     * The version of the service (x.x.x)\n\t     *\n\t     * @member {String} Service#version\n\t     * @readonly\n\t     */\n\t    this.version = description.version;\n\n\t    /**\n\t     * The type of the service (Samsung SmartTV)\n\t     *\n\t     * @member {String} Service#type\n\t     * @readonly\n\t     */\n\t    this.type = description.type;\n\n\t    /**\n\t     * The uri of the service (http://<ip>:<port>/api/v2/)\n\t     *\n\t     * @member {String} Service#uri\n\t     * @readonly\n\t     */\n\t    this.uri = description.uri;\n\n\t    /**\n\t     * A hash of additional information about the device the service is running on\n\t     *\n\t     * @member {String} Service#device\n\t     * @readonly\n\t     */\n\t    this.device = description.device;\n\n\t    props.readOnly(this,['id','name','version','type','uri','device']);\n\n\t}\n\n\t/**\n\t * Creates {@link Application} instances belonging to that service\n\t *\n\t * @param {String} id An installed application id or url of the web application\n\t * @param {String} channelUri The URI of the channel to connect to.\n\t * @returns {Application}\n\t *\n\t * @example\n\t var application = service.application('http://mydomain/myapp/', 'com.mydomain.myapp');\n\t */\n\tService.prototype.application = function(id, channelUri){\n\n\t    return new Application(this, id, channelUri);\n\n\t};\n\n\t/**\n\t * creates a channel of the service ('mychannel')\n\t *\n\t * @param {String} uri The uri of the Channel\n\t * @returns {Channel}\n\t *\n\t * @example\n\t var channel = service.channel('com.mydomain.myapp');\n\t */\n\tService.prototype.channel = function(uri){\n\n\t    return new Channel(this, uri);\n\n\t};\n\n\n\t/***\n\t * Retrieves a reference to the service running on the current device\n\t * (public api should use msf.local)\n\t *\n\t * @protected\n\t *\n\t * @param {Function} callback The callback handler\n\t * @param {Error} callback.err The callback handler\n\t * @param {Service} callback.service The service instance\n\t *\n\t */\n\tService.getLocal = function(callback){\n\n\t    Service.getByURI('http://127.0.0.1:8001/api/v2/', callback);\n\n\t};\n\n\t/***\n\t * Retrieves a service instance by it's uri\n\t * (public api should use msf.remote)\n\t *\n\t * @protected\n\t *\n\t * @param {String} uri The uri of the service (http://<ip>:<port>/api/v2/)\n\t * @param {Function} callback The callback handler\n\t * @param {Error} callback.err The callback handler\n\t * @param {Service} callback.service The service instance\n\t *\n\t */\n\tService.getByURI = function(uri, callback){\n\n\t    var oReq = new XMLHttpRequest();\n\t    oReq.timeout = 5000;\n\t    oReq.ontimeout = function(){callback();};\n\t    oReq.onload = function() {\n\n\t        if(this.status === 200){\n\t            try{\n\t                var result = JSON.parse(this.responseText);\n\t                callback(null, new Service(result));\n\t            }catch(e){  callback(e); }\n\t        }else{\n\t            callback();\n\t        }\n\t    };\n\t    oReq.open(\"get\", uri, true);\n\t    oReq.send();\n\n\t};\n\n\n\tmodule.exports = Service;\n\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util = __webpack_require__(5);\n\tvar props = util.props;\n\tvar EventEmitter = __webpack_require__(2);\n\n\n\t/**\n\t * Provides members related to {@link Service} discovery.\n\t *\n\t * @class Search\n\t * @extends EventEmitter\n\t * @hide-constructor\n\t *\n\t */\n\n\tfunction Search(){\n\n\n\t    Search.super_.call(this);\n\n\t    this.discoveryFrame = null;\n\t    this.status = Search.STATUS_STOPPED;\n\n\t    var self = this;\n\n\t    /* Create the discovery iframe and load the search page */\n\n\t    var frame = document.createElement('iframe');\n\t    frame.setAttribute('width', '1');\n\t    frame.setAttribute('height', '1');\n\t    frame.style.display = \"none\";\n\t    frame.src = 'http://multiscreen.samsung.com/discoveryservice/v2/discover';\n\t    document.body.appendChild(frame);\n\n\t    /* Add a 'message' listener to the window that checks incoming messages */\n\n\t    this.windowMessageListener = function(event){\n\n\t        if(event.source === frame.contentWindow){\n\n\t            // ready message\n\t            if(event.data && event.data.event === 'discovery.ready'){\n\t                self.discoveryFrame = event.source;\n\t                self.onSearchReady();\n\t            }\n\n\t            // result message\n\t            else if(event.data && event.data.event === 'discovery.result'){\n\t                var results = [];\n\t                var Service = __webpack_require__(3);\n\t                for(var i=0; i<event.data.result.length; i++){\n\t                    results.push(new Service(event.data.result[i]));\n\t                }\n\t                self.onSearchResult(results);\n\t            }\n\n\t            // error message\n\t            else if(event.data && event.data.event === 'discovery.error'){\n\t                self.onSearchError(event.data.error);\n\t                this.status = Search.STATUS_STOPPED;\n\t            }\n\t        }\n\t    };\n\t    window.addEventListener('message', this.windowMessageListener);\n\n\t    props.private(this,['discoveryFrame','windowMessageListener']);\n\n\t}\n\n\tutil.inherits(Search, EventEmitter);\n\n\n\t/***\n\t * @constant {string}\n\t * @private\n\t */\n\tSearch.STATUS_STOPPED = 'stopped';\n\n\t/***\n\t * @constant {string}\n\t * @private\n\t */\n\tSearch.STATUS_STARTED = 'started';\n\n\n\t/**\n\t * Starts the search, looking for devices it can reach on the network\n\t * If a search is already in progress it will NOT begin a new search\n\t *\n\t * @example\n\t *\n\t * var search = msf.search();\n\t * search.on('found', function(service){\n\t *    console.log('found service '+service.name);\n\t * }\n\t * search.start();\n\t *\n\t */\n\tSearch.prototype.start = function(){\n\t    if(this.status === Search.STATUS_STOPPED){\n\t        if(this.discoveryFrame){\n\t            this.discoveryFrame.postMessage({method:'discovery.search'}, \"*\");\n\t        }else{\n\t            var self = this;\n\t            this.once('ready',function(){\n\t                self.discoveryFrame.postMessage({method:'discovery.search'}, \"*\");\n\t            });\n\t        }\n\t        this.onSearchStart();\n\t    }else{\n\t        console.warn('a previous search is already in progress');\n\t    }\n\t};\n\n\t/**\n\t * Stops the current search in progress (no 'found' events or search callbacks will fire)\n\t *\n\t * @example\n\t * search.stop();\n\t *\n\t */\n\tSearch.prototype.stop = function(){\n\t    this.onSearchStop();\n\t};\n\n\tSearch.prototype.onSearchReady = function(){\n\t    this.emit('ready');\n\t};\n\n\n\t/**\n\t * Fired when a search has discovered compatible services\n\t *\n\t * @event Search#found\n\t * @type {Array}\n\t * @example\n\t * search.on('found', function(service){\n\t *    console.log('found '+service.name);\n\t * });\n\t */\n\n\n\tSearch.prototype.onSearchResult = function(results){\n\t    if(this.status !== Search.STATUS_STOPPED){\n\t        this.emit('found',results);\n\t    }\n\t    this.status = Search.STATUS_STOPPED;\n\t};\n\n\n\t/**\n\t * Fired when a search error has occurred\n\t *\n\t * @event Search#error\n\t * @type {Error}\n\t * @example\n\t * search.on('error', function(err){\n\t *    console.error('something went wrong', err.message);\n\t * });\n\t */\n\n\tSearch.prototype.onSearchError = function(error){\n\t    this.emit('error',error);\n\t    this.status = Search.STATUS_STOPPED;\n\t};\n\n\t/**\n\t * Fired when a search has been started\n\t *\n\t * @event Search#start\n\t * @type {Search}\n\t *\n\t * @example\n\t * search.on('start', function(){\n\t *    ui.setState('searching');\n\t * });\n\t */\n\tSearch.prototype.onSearchStart = function(){\n\t    this.status = Search.STATUS_STARTED;\n\t    this.emit('start', this);\n\t};\n\n\t/**\n\t * Fired when a search has been stopped\n\t *\n\t * @event Search#stop\n\t * @type {Search}\n\t * @example\n\t * search.on('stop', function(){\n\t *    ui.setState('stopped');\n\t * });\n\t */\n\tSearch.prototype.onSearchStop = function(){\n\t    this.status = Search.STATUS_STOPPED;\n\t    this.emit('stop', this);\n\t};\n\n\n\tmodule.exports = Search;\n\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\n\t    logger      : __webpack_require__(8),\n\t    url         : __webpack_require__(9),\n\t    inherits    : __webpack_require__(10),\n\t    props       : __webpack_require__(11),\n\t    types       : __webpack_require__(12),\n\t    queryString : __webpack_require__(13)\n\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util    = __webpack_require__(5);\n\tvar logger  = util.logger;\n\tvar types   = util.types;\n\tvar props   = util.props;\n\tvar Channel = __webpack_require__(7);\n\n\n\tvar TYPE_APP = 'applications';\n\tvar TYPE_WEB_APP = 'webapplication';\n\n\n\t/**\n\t * An Application represents an application on the remote device.\n\t * Use the class to control various aspects of the application such launching the app or getting information\n\t *\n\t * @class Application\n\t * @extends Channel\n\t *\n\t * @param {Service} service the underlying service\n\t * @param {String} id can be an installed app id or url for a webapp\n\t * @param {String} channelURI a unique channel id (com.myapp.mychannel)\n\t *\n\t * @hide-constructor\n\t */\n\n\tfunction Application(service, id, channelURI){\n\n\t    /* Type checking */\n\t    if(!types.isObject(service)) throw new TypeError('service must be of type Service');\n\t    if(!types.isString(id)) throw new TypeError('id must be a valid string');\n\t    if(!types.isString(channelURI)) throw new TypeError('channelId must be a valid string');\n\n\t    /***\n\t     * The type of application (web application or installable app)\n\t     * @member {String} Application#type\n\t     * @private\n\t     */\n\t    this.type = id.match(/(file:\\/\\/|http(s)?:\\/\\/)/gmi) ? TYPE_WEB_APP : TYPE_APP;\n\n\t    /* Super Constructor */\n\t    Application.super_.call(this, service, channelURI);\n\n\n\t    /**\n\t     * The id of the application (this can be a url or installed application id)\n\t     * @member {String} Application#id\n\t     * @readonly\n\t     */\n\t    this.id = id;\n\n\n\t    /***\n\t     * The underlying of the application\n\t     * @member {String} Application#service\n\t     * @private\n\t     */\n\t    this.service = service;\n\n\n\t    /*\n\t    Listen for clientDisconnect events and disconnect if host disconnects\n\t    */\n\t    this.on('clientDisconnect', function(client){\n\t        if(client.isHost) this.disconnect();\n\t    }.bind(this));\n\n\t    /*\n\t     Turn off emitting the connect event from super as the application will provide its own\n\t    */\n\t    this.disableEvent('connect');\n\n\n\t    props.readOnly(this,'id');\n\t    props.private(this,'type','service');\n\n\t}\n\n\tutil.inherits(Application, Channel);\n\n\n\n\t/**\n\t * Starts and connects to the application on the remote device. Similar to the Channel 'connect' method but\n\t * within an Application the 'connect' callback and event will be only be called when the remote application has\n\t * launched and is ready to receive messages.\n\t *\n\t * @param {Object} attributes Any attributes to attach to your client\n\t * @param {Function} callback The callback handler\n\t * @param {Error} callback.error Any error that may have occurred during the connection or application startup\n\t * @param {Client} callback.client Your client object\n\t *\n\t * @example\n\t * app.connect({displayName:'Wheezy'},function(err, client){\n\t *   if(err) return console.error('something went wrong : ', error.code, error.message);\n\t *   console.info('You are now connected');\n\t * });\n\t */\n\tApplication.prototype.connect = function(attributes, callback){\n\n\t    if(!types.isObject(attributes)) throw new TypeError('attributes must be a valid object');\n\t    if(!types.isFunction(callback)) throw new TypeError('callback must be a valid function');\n\n\t    /*\n\t     This gets a little tricky because in an app instance we dont want connect to fire until the remote device is connected.\n\t     We also want to start the remote application and provide any errors from the launch\n\t     so we need to block the connect event from Channel, start the app, wait for the host to connect, have ready event (deprecated) trigger connect event.\n\t     */\n\n\t   this.start(function(err){\n\n\t       // If there was an issue starting the app callback with the error and stop execution\n\t       if(err) return callback(err);\n\n\t       // Call connect on the super\n\t       Channel.prototype.connect.call(this, attributes, function(err, client){\n\n\t           if(err) return callback(err);\n\n\t           // Set the connected flag to false until ready event fires\n\t           this.connected = false;\n\n\t           // Create a once listener for the ready event that will make the final callback and fire the connect event\n\t           var readyHandler = function(){\n\n\t               // Set the connected property\n\t               this.connected = true;\n\n\t               // call the connect callback\n\t               if(callback) {\n\t                   logger.debug('application.connect->callback', null, client);\n\t                   callback(null, client);\n\t               }\n\n\t               // enable the connect event, fire it, disable it again\n\t               logger.debug('application.emit(\"connect\")', client);\n\t               this.enableEvent('connect');\n\t               this.emit('connect',client);\n\t               this.disableEvent('connect');\n\n\t           }.bind(this);\n\n\t           // Listen once for the ready event\n\t           this.once('ready',readyHandler);\n\n\t       }.bind(this));\n\n\t   }.bind(this));\n\n\t};\n\n\t/**\n\t * Disconnects your client from the remote application.\n\t * If the first argument is an optional param and can be used close the remote application\n\t * The stop/exit command is only sent if you are the last connected client\n\t *\n\t * @param {Boolean} [exitOnRemote=true] Issues a stop/exit on the remote application before disconnecting\n\t * @param {Function} [callback] The callback handler\n\t * @param {Error} callback.error Any error that may have occurred during the connection or application startup\n\t * @param {Client} callback.client Your client object\n\t *\n\t * @example\n\t * app.disconnect(function(err){\n\t *     if(err) return console.error('something went wrong');\n\t *     console.info('You are now disconnected');\n\t * });\n\t */\n\tApplication.prototype.disconnect = function(exitOnRemote, callback){\n\n\t    if(types.isFunction(exitOnRemote)){\n\t        callback = exitOnRemote;\n\t        exitOnRemote = true;\n\t    }\n\n\t    if(types.isUndefined(exitOnRemote)) exitOnRemote = true;\n\n\n\t    if(exitOnRemote && this.clients.length <= 2) {\n\n\t        var stopCallback = function(err){\n\t            // still disconnect even if there was an error\n\t            Channel.prototype.disconnect.call(this, callback);\n\t        }.bind(this);\n\n\t        if(this.type === 'webapplication'){\n\t            this.invoke('ms.webapplication.stop', { url : this.id }, stopCallback);\n\t        }else{\n\t            this.invoke('ms.application.stop', { id : this.id }, stopCallback);\n\t        }\n\n\t    }else{\n\t        Channel.prototype.disconnect.call(this, callback);\n\t    }\n\n\t};\n\n\t/**\n\t * Installs the application on the remote device.\n\t *\n\t * @param {Function} callback The callback handler\n\t * @param {Function} callback.err The callback handler\n\t *\n\t * @example\n\t *  app.connect({name:'Jason'}, function(err, client){\n\t *    if(err.code === 404){\n\t *      var install = confirm('Would you like to install the MyApp on your TV?');\n\t *      if(install){\n\t *         app.install(function(err){\n\t *            alert('Please follow the prompts on your TV to install the application');\n\t *         });\n\t *     }\n\t *   }\n\t *  });\n\t */\n\tApplication.prototype.install = function(callback){\n\n\t    if(this.type === TYPE_WEB_APP) return callback(new Error('web application cannot be installed'));\n\n\t    var e;\n\t    var req = new XMLHttpRequest();\n\t    req.timeout = 10000;\n\n\t    req.ontimeout = function(){\n\t        e = new Error('Request Timeout');\n\t        e.code = 408;\n\t        callback(e);\n\t    };\n\n\t    req.onload = function() {\n\t        if(this.status === 200){\n\t            callback(null, true);\n\t        }\n\t        else {\n\t            e = new Error(this.statusText);\n\t            e.code = this.status;\n\t            callback(e);\n\t        }\n\t    };\n\n\t    req.open(\"get\", this.service.uri + 'applications/'+this.id, true);\n\t    req.send();\n\n\t};\n\n\n\t/***\n\t * Starts the application on the remote device.\n\t *\n\t * @private\n\t *\n\t * @param {Function} callback The callback handler\n\t * @param {Function} callback.err The callback handler\n\t *\n\t */\n\tApplication.prototype.start = function(callback){\n\n\t    var e;\n\n\t    var req = new XMLHttpRequest();\n\t    req.timeout = 10000;\n\n\t    req.ontimeout = function(){\n\t        e = new Error('Request Timeout');\n\t        e.code = 408;\n\t        callback(e);\n\t    };\n\n\t    req.onload = function() {\n\t        if(this.status === 200){\n\t            callback(null, true);\n\t        }\n\t        else {\n\t            e = new Error(this.statusText);\n\t            e.code = this.status;\n\t            callback(e);\n\t        }\n\t    };\n\n\t    if(this.type === TYPE_WEB_APP){\n\t        req.open(\"post\", this.service.uri + 'webapplication/', true);\n\t        req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        req.send(JSON.stringify({url:this.id}));\n\t    }else{\n\t        req.open(\"post\", this.service.uri + 'applications/'+this.id, true);\n\t        req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        req.send(JSON.stringify({}));\n\t    }\n\n\n\t};\n\n\n\n\tmodule.exports = Application;\n\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util    = __webpack_require__(5);\n\tvar logger  = util.logger;\n\tvar types   = util.types;\n\tvar props   = util.props;\n\tvar EventEmitter = __webpack_require__(2);\n\tvar Client = __webpack_require__(14);\n\tvar ClientList = __webpack_require__(15);\n\n\tvar EVENT_HEALTH_CHECK = '__ping';\n\n\n\t/**\n\t * A Channel is a discreet connection where multiple clients can communicate\n\t * @class Channel\n\t * @extends EventEmitter\n\t *\n\t * @hide-constructor\n\t */\n\tfunction Channel(service, uri){\n\n\t    logger.debug('new Channel',arguments);\n\n\t    /* Type checking */\n\t    if(!types.isObject(service)) throw new TypeError('service must be of type Service');\n\t    if(!types.isString(uri)) throw new TypeError('uri must be a valid string');\n\n\t    /* Super Construction */\n\t    Channel.super_.call(this);\n\n\t    var self = this;\n\t    var oServiceUrl = util.url.parse(service.uri);\n\n\n\t    /***\n\t     * The connected state of the channel (a backing variable to isConnected)\n\t     * @protected\n\t     */\n\t    this.connected = false;\n\n\t    /***\n\t     * The id assigned to your client upon connection\n\t     * @private\n\t     */\n\t    this.clientId = null;\n\n\t    /***\n\t     * The underlying web socket connection\n\t     * @private\n\t     */\n\t    this.connection = null;\n\n\t    /***\n\t     * A map of message handler still waiting for responses\n\t     * @private\n\t     */\n\t    this.resultHandlers = {};\n\n\t    /***\n\t     * The url for the websocket to connect to\n\t     * @private\n\t     */\n\t    this.connectionUrl = 'ws://' + oServiceUrl.host + oServiceUrl.pathname + 'channels/' + uri;\n\n\t    /***\n\t     * The time in milliseconds between pings if a connection timeout is defined\n\t     * @private\n\t     */\n\t    this.pingTimeout = null;\n\n\t    /***\n\t     * The 'interval' reference set with setConnectionTimeout\n\t     * @private\n\t     */\n\t    this.pingInterval = null;\n\n\n\t    /**\n\t     * The collection of clients currently connected to the channel\n\t     *\n\t     * @member {ClientList} Channel#clients\n\t     * @readonly\n\t     *\n\t     */\n\t    this.clients = new ClientList(this);\n\n\t    /**\n\t     * The connection status of the channel\n\t     *\n\t     * @member {Boolean} Channel#isConnected\n\t     * @readonly\n\t     *\n\t     */\n\t    Object.defineProperty(this, 'isConnected', {\n\t        get : function(){\n\t            return self.connected;\n\t        }\n\t    });\n\n\n\t    /**\n\t     * Sets the connection timeout. When set the channel will utilize a connection health check while connected.\n\t     * If no pinging health check is not received within the given timeout the connection will close.\n\t     * To stop the health check set the timeout to 0\n\t     *\n\t     * @member {Boolean} Channel#connectionTimeout\n\t     *\n\t     * @example\n\t     * channel.connectionTimeout = 10000; // checks the connection every 10 seconds while connected\n\t     * channel.connectionTimeout = 0; // stops the health check\n\t     */\n\t    Object.defineProperty(this, 'connectionTimeout', {\n\t        set : function(timeout){\n\t            logger.debug('updating connection timeout ',timeout);\n\t            self.pingTimeout = timeout > 0 ? timeout : 0;\n\t            // If we are already connected start the check\n\t            if(this.isConnected) self.startHealthCheck();\n\t        },\n\t        get : function(){\n\t            return self.pingTimeout;\n\t        }\n\t    });\n\n\n\n\t    /* setup health check listeners */\n\t    this.on('connect', this.startHealthCheck);\n\t    this.on('disconnect', this.stopHealthCheck);\n\n\n\t    /* configure access and enumeration of properties */\n\t    props.readOnly(this, ['clients']);\n\t    props.private(this, [\n\t        'connected',\n\t        'clientId',\n\t        'connection',\n\t        'resultHandlers',\n\t        'connectionUrl',\n\t        'connectCallback',\n\t        'pingInterval',\n\t        'pingTimeout',\n\t        'lastPingReceived'\n\t    ]);\n\n\t}\n\n\n\tutil.inherits(Channel, EventEmitter);\n\n\n\n\t/**\n\t * Connects to the channel\n\t *\n\t * @param {Object} attributes Any attributes you want to associate with the client (ie. {name:\"FooBar\"}\n\t * @param {Function} callback The success callback handler\n\t * @param {Error} callback.arg1 Any error that may have occurred\n\t * @param {Client} callback.arg2 The connecting client\n\t *\n\t * @example\n\t * channel.connect({name:'Wheezy'},function(err, client){\n\t *   if(err) return console.error('something went wrong : ', error.code, error.message);\n\t *   console.info(client.attributes.name+', you are now connected');\n\t * });\n\t */\n\tChannel.prototype.connect = function(attributes, callback){\n\n\t    logger.debug('channel.connect',arguments);\n\t    if(this.isConnected) return console.warn('Channel is already connected.');\n\n\t    if(types.isFunction(attributes) && !callback){\n\t        callback = attributes;\n\t        attributes = {};\n\t    }else{\n\t        attributes = attributes || {};\n\t    }\n\n\t    // Validate arguments and connection state\n\t    if(!types.isObject(attributes))throw new TypeError('attributes must be a valid object');\n\t    if(callback && !types.isFunction(callback))throw new TypeError('callback must be a valid function');\n\n\n\t    // Store the callback\n\t    this.connectCallback = callback;\n\n\t    // TODO : Need to merge query string just in case the connection url already has a query (although it shouldn't)\n\t    var u = this.connectionUrl + '?' + util.queryString.stringify(attributes);\n\n\t    // Clean up any old connections\n\t    if(this.connection){\n\t        this.connection.onopen = null;\n\t        this.connection.onerror = null;\n\t        this.connection.onclose = null;\n\t        this.connection.onmessage = null;\n\t    }\n\n\t    // Connect the websocket and add our listeners\n\t    this.connection = new WebSocket(u);\n\t    this.connection.binaryType = \"arraybuffer\";\n\t    this.connection.onopen = this._onSocketOpen.bind(this);\n\t    this.connection.onerror = this._onSocketError.bind(this);\n\t    this.connection.onclose = this._onSocketClose.bind(this);\n\t    this.connection.onmessage = this._onSocketMessage.bind(this);\n\t};\n\n\t/**\n\t * Disconnects from the channel\n\t *\n\t * @param {Function} callback The success callback handler\n\t * @param {Error} callback.error Any error that may have occurred\n\t * @param {Client} callback.client The disconnecting client\n\t *\n\t * @example\n\t * channel.disconnect(function(err, client){\n\t *   if(err) return console.error('something went wrong : ', error.code, error.message);\n\t *   console.info(client.attributes.name+', you are now disconnected');\n\t * });\n\t */\n\tChannel.prototype.disconnect = function(callback){\n\n\t    logger.debug('channel.disconnect',arguments);\n\t    if(!this.isConnected) console.warn(\"channel is already disconnected\");\n\n\t    this.connection.close();\n\t    var self = this;\n\t    setTimeout(function(){\n\t        if(callback) callback(null, self);\n\t    },0);\n\n\t};\n\n\t/**\n\t * Publish an event message to the specified target or targets.\n\t * Targets can be in the for of a clients id, an array of client ids or one of the special message target strings (ie. \"all\" or \"host\"}\n\t *\n\t * @param {String} event The name of the event to emit\n\t * @param {any} [message] Any data associated with the event\n\t * @param {String|Array} [target='broadcast'] The target recipient(s) of the message\n\t * @param {Blob|ArrayBuffer} [payload] Any binary data to send with the message\n\t *\n\t * @example\n\t * channel.publish('myCustomEventName',{custom:'data'});\n\t */\n\tChannel.prototype.publish = function(event, message, target, payload){\n\n\t    logger.silly('channel.publish',arguments);\n\t    if(!this.isConnected) return console.warn('Channel is not connected.');\n\n\t    target = target || 'broadcast';\n\t    message = message || null;\n\n\n\t    if(!types.isString(event))throw new TypeError('event must be a valid string');\n\t    if(!(types.isString(target) || types.isArray(target))) throw new TypeError('targets must be a valid string or array');\n\n\t    this.invoke('ms.channel.emit',{\n\t        event   : event,\n\t        data    : message,\n\t        to      : target\n\t    }, null, true, payload);\n\n\t};\n\n\n\n\n\t/*\n\t Packs messages with payloads into binary message\n\t */\n\tChannel.packMessage = function(oMsg, payload){\n\n\t    logger.debug('channel.packMessage',arguments);\n\n\t    // convert js object to string\n\t    var msg = JSON.stringify(oMsg);\n\n\t    // get byte length of the string\n\t    var msgByteLength = new Blob([msg]).size;\n\n\t    // create 2 byte header which contains the length of the string (json) message\n\t    var hBuff = new ArrayBuffer(2);\n\t    var hView = new DataView(hBuff);\n\t    hView.setUint16(0,msgByteLength);\n\n\t    // binary packed message and payload\n\t    return new Blob([hBuff, msg, payload]);\n\n\t};\n\n\t/*\n\t Unpacks binary messages\n\t */\n\tChannel.unpackMessage = function(buffer){\n\n\t    logger.debug('channel.unpackMessage',arguments);\n\n\t    var json = '';\n\t    var view = new DataView(buffer);\n\t    var msgByteLen = view.getUint16(0);\n\n\t    for (var i = 0; i < msgByteLen; i++) {\n\t        json += String.fromCharCode(view.getUint8(i+2));\n\t    }\n\n\t    var payload = buffer.slice(2+msgByteLen);\n\t    var message = JSON.parse(json);\n\n\t    return {payload : payload, message : message};\n\n\t};\n\n\n\n\t/***\n\t * Invokes and RPC method on the server\n\t *\n\t * @protected\n\t *\n\t * @param {String} method The name of the method to invoke\n\t * @param {Object} params Named params to pass to the method\n\t * @param {Function} [callback] The success callback handler\n\t * @param {Error} callback.error Any error that may have occurred\n\t * @param {Boolean} callback.success\n\t * @param {Boolean} [isNotification=false] If true the message will have no id and no response handler will be stored\n\t * @param {ArrayBuffer|Blob} [payload] Any binary data to send along with the message\n\t *\n\t */\n\tChannel.prototype.invoke = function(method, params, callback, isNotification, payload){\n\n\t    logger.debug('channel.invoke',arguments);\n\n\t    if(!types.isString(method))throw new TypeError('method must be a valid string');\n\n\t    params = params || {};\n\n\t    var msg = {\n\t        method  : method,\n\t        params  : params\n\t    };\n\n\t    if(callback && !isNotification){\n\t        msg.id = Date.now();\n\t        this.resultHandlers[msg.id] = callback;\n\t    }\n\n\t    if(payload){\n\t        msg = Channel.packMessage(msg,payload);\n\t    }else{\n\t        msg = JSON.stringify(msg);\n\t    }\n\n\t    this.connection.send(msg);\n\t};\n\n\t/**\n\t * Fired when a channel makes a connection\n\t *\n\t * @event Channel#connect\n\t * @param {Client} client - Your client\n\t * @example\n\t * channel.on('connect',function(client){\n\t *  console.log('You are now connected');\n\t * });\n\t */\n\tChannel.prototype._onConnect = function(data) {\n\n\t    logger.silly('channel._onConnect');\n\n\t    this.connected = true;\n\n\t    // Store my id\n\t    this.clientId = data.id;\n\n\t    // Store the current connected client\n\t    data.clients.forEach(function(clientInfo){\n\n\t        // Create a client and add to our list\n\t        var client = new Client(clientInfo.id, clientInfo.attributes, clientInfo.isHost);\n\t        this.clients.push(client);\n\n\t    },this);\n\n\t    // call the connect callback if present and reset\n\t    if(this.connectCallback) {\n\t        logger.debug('channel.connect->callback',this.clients.me);\n\t        this.connectCallback(null, this.clients.me);\n\t        this.connectCallback = null;\n\t    }\n\n\n\t    logger.debug('channel.emit(\"connect\")',this.clients.me);\n\t    this.emit('connect',this.clients.me);\n\n\t};\n\n\n\t/**\n\t * Fired when a channel disconnects\n\t *\n\t * @event Channel#disconnect\n\t * @param {Client} client - Your client\n\t * @example\n\t * channel.on('disconnect',function(client){\n\t *  console.log('You are now disconnected');\n\t * });\n\t */\n\tChannel.prototype._onDisconnect = function(data) {\n\t    logger.silly('channel._onDisconnect');\n\n\t    if(this.connected){\n\t        var client = this.clients.me;\n\t        this.clients.clear();\n\n\t        logger.debug('channel.emit(\"disconnect\")',client);\n\t        this.emit('disconnect',client);\n\t    }\n\t    this.connected = false;\n\n\n\t};\n\n\n\t/**\n\t * Fired when a peer client channel makes a connection\n\t *\n\t * @event Channel#clientConnect\n\t * @param {Client} client - The client that connected\n\t * @example\n\t * channel.on('clientConnect',function(client){\n\t *  console.log(client.id + 'is now connected');\n\t * });\n\t */\n\tChannel.prototype._onClientConnect = function(data) {\n\t    logger.silly('channel._onClientConnect');\n\n\t    var client = new Client(data.id, data.attributes, data.isHost);\n\t    this.clients.push(client);\n\n\t    logger.debug('channel.emit(\"clientConnect\")',client);\n\t    this.emit('clientConnect',client);\n\t};\n\n\t/**\n\t * Fired when a peer client disconnects\n\t *\n\t * @event Channel#clientDisconnect\n\t * @param {Client} client - The client that connected\n\t * @example\n\t * channel.on('clientDisconnect',function(client){\n\t *  console.log(client.id + 'has disconnected');\n\t * });\n\t */\n\tChannel.prototype._onClientDisconnect = function(data) {\n\t    logger.silly('channel._onClientDisconnect');\n\n\t    var client = this.clients.getById(data.id);\n\t    if(client) this.clients.remove(client);\n\t    else {\n\t        logger.warn('client '+data.id+' could not be found, so it was not removed from the client list');\n\t        client = new Client(data.id, data.attributes, data.isHost);\n\t    }\n\n\n\t    logger.debug('channel.emit(\"clientDisconnect\")',client);\n\t    this.emit('clientDisconnect',client);\n\n\t};\n\n\t/***\n\t * Fired when the host has connected and is ready to accept messages\n\t * @deprecated since version 2.0.18 (please use the connect event)\n\t *\n\t * @event Channel#ready\n\t */\n\tChannel.prototype._onReady = function(data){\n\n\t    logger.debug('channel.emit(\"ready\")');\n\t    this.emit('ready');\n\t};\n\n\tChannel.prototype._onUserEvent = function(msg){\n\n\t    var client = this.clients.getById(msg.from);\n\t    var event = msg.event;\n\t    var data  = msg.data;\n\t    var payload = msg.payload;\n\n\t    logger.debug('channel.emit(\"'+event+'\")',data, client, payload);\n\t    this.emit(event, data, client, payload);\n\t};\n\n\tChannel.prototype._onSocketOpen = function() {\n\t    logger.silly('channel._onSocketOpen');\n\t};\n\n\tChannel.prototype._onSocketClose = function() {\n\t    logger.silly('channel._onSocketClose');\n\t    this._onDisconnect();\n\t};\n\n\tChannel.prototype._onSocketError = function(e) {\n\t    logger.silly('channel._onSocketError',e);\n\t    this.emit('error', new Error(\"WebSocket error\"));\n\t};\n\n\n\tChannel.prototype._onSocketMessage = function(msg){\n\n\t    logger.silly('channel._onSocketMessage',msg);\n\n\t    // Serialize the message\n\t    try{\n\t        if(typeof msg.data === \"string\"){\n\t            msg = JSON.parse(msg.data);\n\t        }else{\n\t            var unpacked = Channel.unpackMessage(msg.data);\n\t            msg = unpacked.message;\n\t            msg.payload = unpacked.payload;\n\t        }\n\t    } catch (e) {\n\t        logger.warn('unable to parse message', msg);\n\t        return;\n\t    }\n\n\t    // RPC Response?\n\t    if(msg.id && (msg.result || msg.error)){\n\n\t        if(!this.resultHandlers[msg.id]){\n\t            logger.warn('unable to find result handler for result message ', msg);\n\t            return;\n\t        }\n\n\t        this.resultHandlers[msg.id](msg.error,msg.result);\n\n\t    }\n\t    // Event?\n\t    else if (msg.event){\n\n\t        switch(msg.event){\n\n\t            case 'ms.channel.connect' :\n\t                this._onConnect(msg.data);\n\t                break;\n\n\t            case 'ms.channel.clientConnect' :\n\t                this._onClientConnect(msg.data);\n\t                break;\n\n\t            case 'ms.channel.clientDisconnect' :\n\t                this._onClientDisconnect(msg.data);\n\t                break;\n\n\t            case 'ms.channel.ready' :\n\t                this._onReady(msg.data);\n\t                break;\n\n\t            default :\n\t                this._onUserEvent(msg);\n\t                break;\n\t        }\n\t    }\n\t    // Unrecognized\n\t    else{\n\t        logger.warn('unrecognized message type', msg);\n\t    }\n\n\t};\n\n\tChannel.prototype.startHealthCheck = function(){\n\n\t    // stop any previous health checking\n\t    this.stopHealthCheck();\n\n\t    if(this.pingTimeout > 0){\n\n\t        var lastReceivedPing = null;\n\n\t        this.on(EVENT_HEALTH_CHECK, function(sent){\n\t            lastReceivedPing = Date.now();\n\t            logger.debug('ping trip : ',lastReceivedPing - sent);\n\t            logger.debug('updated last ping time : ',lastReceivedPing);\n\t        });\n\n\t        var checkAndPing = function(){\n\n\t            var now = Date.now();\n\t            if(!lastReceivedPing) lastReceivedPing = now;\n\n\t            if(now - lastReceivedPing < this.pingTimeout){\n\t                logger.debug('sending ping');\n\t                this.publish(EVENT_HEALTH_CHECK, now, this.clients.me.id);\n\t            }else{\n\t                logger.debug('ping timed, out closing connection');\n\t                this.stopHealthCheck();\n\t                if(this.connection){\n\t                    this.connection.close();\n\t                    // forcing disconnect\n\t                    this._onDisconnect();\n\t                }\n\t            }\n\t        }.bind(this);\n\n\t        // start the timer\n\t        this.pingInterval = setInterval(checkAndPing,this.pingTimeout);\n\t    }\n\n\n\n\t};\n\n\tChannel.prototype.stopHealthCheck = function(){\n\t    clearInterval(this.pingInterval);\n\t    this.removeAllListeners(EVENT_HEALTH_CHECK);\n\t};\n\n\n\tmodule.exports = Channel;\n\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar levels = ['error','warn','info','verbose','debug','silly'];\n\n\tvar logger = {\n\n\t    level : 'disabled',\n\n\t    log : function(level /* ,....args*/){\n\t        if(logger.level !== 'disabled' && (levels.indexOf(level) <= levels.indexOf(logger.level))){\n\t            var args = Array.prototype.slice.call(arguments,1);\n\t            args.unshift('[MSF:'+level.toUpperCase()+']');\n\t            if(console[level]){\n\t                console[level].apply(console,args);\n\t            }else{\n\t                console.log.apply(console,args);\n\t            }\n\n\t        }\n\t    }\n\n\t};\n\n\tfunction createLevel(level){\n\t    return function(/*args*/){\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.unshift(level);\n\t        logger.log.apply(logger,args);\n\t    };\n\t}\n\n\t// Create logger methods based on levels\n\tfor(var i=0; i<levels.length; i++){\n\t    var level = levels[i];\n\t    logger[level] = createLevel(level);\n\t}\n\n\tmodule.exports = logger;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar queryString = __webpack_require__(13);\n\n\tvar url = {\n\n\t    isValid : function(u){\n\n\t        var pattern = /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\n\t        return u.match(pattern) ? true : false;\n\t    },\n\n\t    parse : function(u){\n\n\t        var oUrl = {};\n\t        var parser = document.createElement('a');\n\t        parser.href = u; // \"http://example.com:3000/pathname/?search=test#hash\";\n\n\t        oUrl.href = parser.href; // => \"http://ip:port/path/page?query=string#hash\"\n\t        oUrl.protocol = parser.protocol; // => \"http:\"\n\t        oUrl.hostname = parser.hostname; // => \"example.com\"\n\t        oUrl.port = parser.port;     // => \"3000\"\n\t        oUrl.pathname = parser.pathname; // => \"/pathname/\"\n\t        oUrl.search = parser.search;   // => \"?search=test\"\n\t        oUrl.hash = parser.hash;     // => \"#hash\"\n\t        oUrl.host = parser.host;     // => \"example.com:3000\"\n\t        oUrl.queryString = queryString.parse(parser.search);\n\n\t        return oUrl;\n\t    }\n\n\n\t};\n\n\tmodule.exports = url;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tif (typeof Object.create === 'function') {\n\t    // implementation from standard node.js 'util' module\n\t    module.exports = function inherits(ctor, superCtor) {\n\t        ctor.super_ = superCtor;\n\t        ctor.prototype = Object.create(superCtor.prototype, {\n\t            constructor: {\n\t                value: ctor,\n\t                enumerable: false,\n\t                writable: true,\n\t                configurable: true\n\t            }\n\t        });\n\t    };\n\t} else {\n\t    // old school shim for old browsers\n\t    module.exports = function inherits(ctor, superCtor) {\n\t        ctor.super_ = superCtor;\n\t        var TempCtor = function () {};\n\t        TempCtor.prototype = superCtor.prototype;\n\t        ctor.prototype = new TempCtor();\n\t        ctor.prototype.constructor = ctor;\n\t    };\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tfunction createDescriptor(e,c,w,v){\n\t    return {\n\t        enumerable : e,\n\t        configurable : c,\n\t        writable : w,\n\t        value : v\n\t    };\n\t}\n\n\tmodule.exports = {\n\n\t    readOnly : function(obj, key){\n\n\t        if(Array.isArray(key)){\n\t            key.forEach(function(k){\n\t                Object.defineProperty(obj, k, createDescriptor(true,true,false,obj[k]));\n\t            });\n\t        }else{\n\t            Object.defineProperty(obj, key, createDescriptor(true,true,false,obj[key]));\n\t        }\n\n\t    },\n\n\t    private : function(obj, key){\n\n\t        if(Array.isArray(key)){\n\t            key.forEach(function(k){ Object.defineProperty(obj, k, createDescriptor(false,true,true,obj[k])); });\n\t        }else{\n\t            Object.defineProperty(obj, key, createDescriptor(false,true,true,obj[key]));\n\t        }\n\t    }\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tmodule.exports = {\n\n\t    isString : function(obj){\n\t        return typeof obj === 'string';\n\t    },\n\n\t    isNull : function(obj){\n\t        return obj === null;\n\t    },\n\n\t    isBoolean : function(obj){\n\t        return typeof obj === 'boolean';\n\t    },\n\n\t    isNumber : function(obj){\n\t        return typeof obj === 'number';\n\t    },\n\n\t    isObject : function(obj){\n\t        return obj === Object(obj);\n\t    },\n\n\t    isArray : function(obj){\n\t        return obj.constructor === Array;\n\t    },\n\n\t    isFunction : function(obj){\n\t        return typeof obj === 'function';\n\t    },\n\n\t    isUndefined : function(obj){\n\t        return typeof obj === 'undefined';\n\t    }\n\n\n\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/*\n\t    Derived work from Sidre Sorhus (https://github.com/sindresorhus/query-string)\n\t */\n\n\t/*!\n\t query-string\n\t Parse and stringify URL query strings\n\t https://github.com/sindresorhus/query-string\n\t by Sindre Sorhus\n\t MIT License\n\t */\n\n\tvar queryString = {};\n\n\tqueryString.parse = function (str) {\n\t    if (typeof str !== 'string') {\n\t        return {};\n\t    }\n\n\t    str = str.trim().replace(/^(\\?|#)/, '');\n\n\t    if (!str) {\n\t        return {};\n\t    }\n\n\t    return str.trim().split('&').reduce(function (ret, param) {\n\t        var parts = param.replace(/\\+/g, ' ').split('=');\n\t        var key = parts[0];\n\t        var val = parts[1];\n\n\t        key = decodeURIComponent(key);\n\t        // missing `=` should be `null`:\n\t        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t        val = val === undefined ? null : decodeURIComponent(val);\n\n\t        if (!ret.hasOwnProperty(key)) {\n\t            ret[key] = val;\n\t        } else if (Array.isArray(ret[key])) {\n\t            ret[key].push(val);\n\t        } else {\n\t            ret[key] = [ret[key], val];\n\t        }\n\n\t        return ret;\n\t    }, {});\n\t};\n\n\tqueryString.stringify = function (obj) {\n\t    return obj ? Object.keys(obj).map(function (key) {\n\t        var val = obj[key];\n\n\t        if (Array.isArray(val)) {\n\t            return val.map(function (val2) {\n\t                return encodeURIComponent(key) + '=' + encodeURIComponent(val2);\n\t            }).join('&');\n\t        }\n\n\t        return encodeURIComponent(key) + '=' + encodeURIComponent(val);\n\t    }).join('&') : '';\n\t};\n\n\tmodule.exports = queryString;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util = __webpack_require__(5);\n\tvar types = util.types;\n\n\n\t/**\n\t * A representation of an individual device or user connected to a channel.\n\t * Clients can have user defined attributes that are readable by all other clients.\n\t * @class Client\n\t *\n\t * @hide-constructor\n\t *\n\t */\n\tfunction Client(id, attributes, isHost, connectTime){\n\n\t    if(!types.isString(id)) throw new TypeError('id must be a valid string');\n\t    if(attributes && !types.isObject(attributes)) throw new TypeError('attributes must be a valid object');\n\n\t    /**\n\t     * The id of the client\n\t     *\n\t     * @name id\n\t     * @memberOf Client.prototype\n\t     * @type {String}\n\t     * @readonly\n\t     *\n\t     */\n\t    this.id = id;\n\n\t    /**\n\t     * A map of attributes passed by the client when connecting\n\t     *\n\t     * @name attributes\n\t     * @memberOf Client.prototype\n\t     * @type {Object}\n\t     * @readonly\n\t     *\n\t     */\n\t    this.attributes = attributes || {};\n\n\t    /**\n\t     * Flag for determining if the client is the host\n\t     *\n\t     * @name isHost\n\t     * @memberOf Client.prototype\n\t     * @type {Boolean}\n\t     * @readonly\n\t     *\n\t     */\n\t    this.isHost = isHost;\n\n\t    /**\n\t     * The time which the client connected in epoch milliseconds\n\t     *\n\t     * @name connectTime\n\t     * @memberOf Client.prototype\n\t     * @type {Number}\n\t     * @readonly\n\t     *\n\t     */\n\t    this.connectTime = connectTime || Date.now();\n\n\t    Object.freeze(this.attributes);\n\t    Object.freeze(this);\n\n\t}\n\n\tmodule.exports = Client;\n\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar util = __webpack_require__(5);\n\tvar types = util.types;\n\n\t/**\n\t * A list of {@link Client|clients} accessible through {@link Channel#clients|channel.clients}.\n\t * This list is managed by the channel and automatically adds and removes clients as they connect and disconnect\n\t * @class ClientList\n\t * @extends Array\n\t * @hide-constructor\n\t */\n\n\tfunction ClientList(channel){\n\n\t    if(!types.isObject(channel))throw new TypeError('channel must be of type Channel');\n\n\t    this.channel = channel;\n\n\t    ClientList.super_.call(this);\n\n\t}\n\n\tutil.inherits(ClientList, Array);\n\n\t/**\n\t * A reference to your client\n\t *\n\t * @member {Client} ClientList#me\n\t * @readonly\n\t */\n\tObject.defineProperty(ClientList.prototype, 'me', {\n\t    get : function(){\n\t        return this.getById(this.channel.clientId);\n\t    }\n\t});\n\n\t/***\n\t * Clears the list\n\t * @protected\n\t */\n\tClientList.prototype.clear = function(){\n\t    this.length = 0;\n\t};\n\n\t/***\n\t * Removes an client from the list\n\t * @protected\n\t */\n\tClientList.prototype.remove = function(item){\n\t    var i = this.indexOf(item);\n\t    if(i !== -1) {\n\t        this.splice(i, 1);\n\t        return item;\n\t    }\n\t    return null;\n\t};\n\n\n\t/**\n\t * Returns a client by id\n\t *\n\t * @param {String} id The client\n\t * @return {Client}\n\t *\n\t */\n\tClientList.prototype.getById = function(id){\n\n\t    if(!types.isString(id) && !types.isNumber(id)) throw new TypeError('id must be a valid string or number');\n\t    for(var i=0; i<this.length; i++){\n\t        if(this[i].id === id) return this[i];\n\t    }\n\t    return null;\n\t};\n\n\n\tmodule.exports = ClientList;\n\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** msf-2.0.22.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 920ed9b37c25594f7874\n **/","\"use strict\";\n\nvar msf = require('./lib/msf');\n\nmsf.version = '{{version}}';\n\nif (typeof define === 'function' && define.amd) {\n    define(function() { return msf; });\n} else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = msf;\n} else {\n    window.msf = msf;\n}\n\nmodule.exports = msf;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util = require(\"./util\");\nvar EventEmitter = require('./EventEmitter');\nvar Service = require('./Service');\nvar Search = require('./Search');\n\n// We will use a singleton for search so that we don't create multiple frames in the page\nvar search = null;\n\n\n/**\n * The 'msf' module/object is the entry point for the API.\n * If including the library via script tag it will be a global object attached to the window\n * or the export of the module if using amd/commonjs (requirejs/browserify)\n *\n * @module msf\n *\n */\n\n\n/*\n Can be used to debug if there is an issue\n msf.logger.level = 'error'|'warn'|'info'|'verbose'|'debug'|'silly'\n */\nmodule.exports.logger  = util.logger;\n\n\n/**\n * Searches the local network for compatible multiscreen services\n *\n * @param {Function} [callback] If a callback is passed the search is immediately started.\n * @param {Error} callback.err The callback handler\n * @param {Service[]} callback.result An array of {@link Service} instances found on the network\n * @returns {Search} A search instance (a singleton is used to reduce page resources)\n *\n * @example\n * msf.search(function(err, services){\n *   if(err) return console.error('something went wrong', err.message);\n *   console.log('found '+services.length+' services');\n * }\n *\n * // OR\n *\n * var search = msf.search();\n * search.on('found', function(service){\n *    console.log('found service '+service.name);\n * }\n * search.start();\n *\n */\nmodule.exports.search = function(callback){\n\n    // Create the single instance if we don't already have one\n    if(!search) search = new Search();\n\n    // If there is a callback defined, listen once for results and start the search\n    if(callback) {\n        search.once('found',function(services){\n            callback(null, services);\n        });\n\n        // start on next tick to support search callbacks and events\n        setTimeout(function(){ search.start(); },0);\n\n    }\n\n    return search;\n\n};\n\n\n/**\n * Retrieves a reference to the service running on the current device. This is typically only used on the 'host' device.\n *\n * @param {Function} callback The callback handler\n * @param {Error} callback.error\n * @param {Service} callback.service The service instance\n *\n * @example\n * msf.local(function(err, service){\n *   console.log('my service name is '+service.name);\n * }\n */\nmodule.exports.local = function(callback){\n\n    Service.getLocal(callback);\n\n};\n\n/**\n * Retrieves a service instance by it's uri\n *\n * @param {String} uri The uri of the service (http://host:port/api/v2/)\n * @param {Function} callback The callback handler\n * @param {Error} callback.error\n * @param {Service} callback.service The service instance\n *\n * @example\n * msf.remote('http://host:port/api/v2/',function(err, service){\n *   console.log('the service name is '+service.name);\n * }\n */\nmodule.exports.remote = function(uri, callback){\n\n    Service.getByURI(uri, callback);\n\n};\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/msf.js\n ** module id = 1\n ** module chunks = 0\n **/","/* jshint newcap: false, -W040: false, -W004: false, -W003 : false */\n\"use strict\";\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n/**\n * All objects which emit events are instances of EventEmitter.\n * The EventEmitter class is derived from the nodejs EventEmitter.\n *\n * For simplicity only the most used members are documented here, for full documentation read {@link http://nodejs.org/api/events.html}\n * @class EventEmitter\n * @hide-constructor\n */\nfunction EventEmitter() {\n this._events = this._events || {};\n this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._disabledEvents = {};\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n if (!isNumber(n) || n < 0 || isNaN(n))\n  throw TypeError('n must be a positive number');\n this._maxListeners = n;\n return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n var er, handler, len, args, i, listeners;\n\n if (!this._events){\n     this._events = {};\n }\n\n if(this._disabledEvents[type]) return false;\n\n // If there is no 'error' event listener then throw.\n if (type === 'error') {\n  if (!this._events.error ||\n      (isObject(this._events.error) && !this._events.error.length)) {\n   er = arguments[1];\n   if (er instanceof Error) {\n    throw er; // Unhandled 'error' event\n   }\n   throw TypeError('Uncaught, unspecified \"error\" event.');\n  }\n }\n\n handler = this._events[type];\n\n if (isUndefined(handler))\n  return false;\n\n if (isFunction(handler)) {\n  switch (arguments.length) {\n   // fast cases\n   case 1:\n    handler.call(this);\n    break;\n   case 2:\n    handler.call(this, arguments[1]);\n    break;\n   case 3:\n    handler.call(this, arguments[1], arguments[2]);\n    break;\n   // slower\n   default:\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n     args[i - 1] = arguments[i];\n    handler.apply(this, args);\n  }\n } else if (isObject(handler)) {\n  len = arguments.length;\n  args = new Array(len - 1);\n  for (i = 1; i < len; i++)\n   args[i - 1] = arguments[i];\n\n  listeners = handler.slice();\n  len = listeners.length;\n  for (i = 0; i < len; i++){\n      // a small hack put in to be able to stop event emission\n      var r = listeners[i].apply(this, args);\n      if(r === 'stopEvent') break;\n  }\n\n }\n\n return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n var m;\n\n if (!isFunction(listener))\n  throw TypeError('listener must be a function');\n\n if (!this._events)\n  this._events = {};\n\n // To avoid recursion in the case that type === \"newListener\"! Before\n // adding it to the listeners, first emit \"newListener\".\n if (this._events.newListener)\n  this.emit('newListener', type,\n      isFunction(listener.listener) ?\n          listener.listener : listener);\n\n if (!this._events[type])\n // Optimize the case of one listener. Don't need the extra array object.\n  this._events[type] = listener;\n else if (isObject(this._events[type]))\n // If we've already got an array, just append.\n  this._events[type].push(listener);\n else\n // Adding the second element, need to change to array.\n  this._events[type] = [this._events[type], listener];\n\n // Check for listener leak\n if (isObject(this._events[type]) && !this._events[type].warned) {\n  var m;\n  if (!isUndefined(this._maxListeners)) {\n   m = this._maxListeners;\n  } else {\n   m = EventEmitter.defaultMaxListeners;\n  }\n\n  if (m && m > 0 && this._events[type].length > m) {\n   this._events[type].warned = true;\n   console.error('(node) warning: possible EventEmitter memory ' +\n       'leak detected. %d listeners added. ' +\n       'Use emitter.setMaxListeners() to increase limit.',\n       this._events[type].length);\n   if (typeof console.trace === 'function') {\n    // not supported in IE 10\n    console.trace();\n   }\n  }\n }\n\n return this;\n};\n\n/**\n * Adds a listener for the event.\n * @param {String} type The event name to listen to\n * @param {Function} listener The function to invoke when the event occurs\n * @returns EventEmitter\n *\n */\nEventEmitter.prototype.on = function(type, listener){\n    EventEmitter.prototype.addListener.apply(this,arguments);\n};\n\n/**\n * Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed.\n * @param {String} type The event name to listen to\n * @param {Function} listener The function to invoke when the event occurs\n * @returns EventEmitter\n *\n */\nEventEmitter.prototype.once = function(type, listener) {\n if (!isFunction(listener))\n  throw TypeError('listener must be a function');\n\n var fired = false;\n\n function g() {\n  this.removeListener(type, g);\n\n  if (!fired) {\n   fired = true;\n   listener.apply(this, arguments);\n  }\n }\n\n g.listener = listener;\n this.on(type, g);\n\n return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n var list, position, length, i;\n\n if (!isFunction(listener))\n  throw TypeError('listener must be a function');\n\n if (!this._events || !this._events[type])\n  return this;\n\n list = this._events[type];\n length = list.length;\n position = -1;\n\n if (list === listener ||\n     (isFunction(list.listener) && list.listener === listener)) {\n  delete this._events[type];\n  if (this._events.removeListener)\n   this.emit('removeListener', type, listener);\n\n } else if (isObject(list)) {\n  for (i = length; i-- > 0;) {\n   if (list[i] === listener ||\n       (list[i].listener && list[i].listener === listener)) {\n    position = i;\n    break;\n   }\n  }\n\n  if (position < 0)\n   return this;\n\n  if (list.length === 1) {\n   list.length = 0;\n   delete this._events[type];\n  } else {\n   list.splice(position, 1);\n  }\n\n  if (this._events.removeListener)\n   this.emit('removeListener', type, listener);\n }\n\n return this;\n};\n\n/**\n * Alias for removeListener\n * @param {String} type The event name to stop listening to\n * @param {Function} listener The function that was originally add to handle the event\n * @returns EventEmitter\n *\n */\nEventEmitter.prototype.off = function(type, listener){\n    EventEmitter.prototype.removeListener.apply(this,arguments);\n};\n\n\n/**\n * Removes all listeners, or those of the specified event.\n * @param {String} event The event name to stop listening to\n * @returns EventEmitter\n *\n */\nEventEmitter.prototype.removeAllListeners = function(type) {\n var key, listeners;\n\n if (!this._events)\n  return this;\n\n // not listening for removeListener, no need to emit\n if (!this._events.removeListener) {\n  if (arguments.length === 0)\n   this._events = {};\n  else if (this._events[type])\n   delete this._events[type];\n  return this;\n }\n\n // emit removeListener for all listeners on all events\n if (arguments.length === 0) {\n  for (key in this._events) {\n   if (key === 'removeListener') continue;\n   this.removeAllListeners(key);\n  }\n  this.removeAllListeners('removeListener');\n  this._events = {};\n  return this;\n }\n\n listeners = this._events[type];\n\n if (isFunction(listeners)) {\n  this.removeListener(type, listeners);\n } else {\n  // LIFO order\n  while (listeners.length)\n   this.removeListener(type, listeners[listeners.length - 1]);\n }\n delete this._events[type];\n\n return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n var ret;\n if (!this._events || !this._events[type])\n  ret = [];\n else if (isFunction(this._events[type]))\n  ret = [this._events[type]];\n else\n  ret = this._events[type].slice();\n return ret;\n};\n\nEventEmitter.prototype.disableEvent = function(type) {\n    if(type && typeof type === 'string'){\n        this._disabledEvents[type] = true;\n    }\n};\n\nEventEmitter.prototype.enableEvent = function(type) {\n    if(type && typeof type === 'string'){\n        delete this._disabledEvents[type];\n    }\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n var ret;\n if (!emitter._events || !emitter._events[type])\n  ret = 0;\n else if (isFunction(emitter._events[type]))\n  ret = 1;\n else\n  ret = emitter._events[type].length;\n return ret;\n};\n\nfunction isFunction(arg) {\n return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n return arg === void 0;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/EventEmitter.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util = require(\"./util\");\nvar props = util.props;\nvar Application = require('./Application');\nvar Channel = require('./Channel');\n\n\n/**\n * A Service instance represents the multiscreen service running on the remote device, such as a SmartTV\n *\n * @class Service\n * @hide-constructor\n *\n */\n\nfunction Service(description){\n\n    /**\n     * The id of the service\n     *\n     * @member {String} Service#id\n     * @readonly\n     */\n    this.id = description.id;\n\n    /**\n     * The name of the service (Living Room TV)\n     *\n     * @member {String} Service#name\n     * @readonly\n     */\n    this.name = description.name;\n\n    /**\n     * The version of the service (x.x.x)\n     *\n     * @member {String} Service#version\n     * @readonly\n     */\n    this.version = description.version;\n\n    /**\n     * The type of the service (Samsung SmartTV)\n     *\n     * @member {String} Service#type\n     * @readonly\n     */\n    this.type = description.type;\n\n    /**\n     * The uri of the service (http://<ip>:<port>/api/v2/)\n     *\n     * @member {String} Service#uri\n     * @readonly\n     */\n    this.uri = description.uri;\n\n    /**\n     * A hash of additional information about the device the service is running on\n     *\n     * @member {String} Service#device\n     * @readonly\n     */\n    this.device = description.device;\n\n    props.readOnly(this,['id','name','version','type','uri','device']);\n\n}\n\n/**\n * Creates {@link Application} instances belonging to that service\n *\n * @param {String} id An installed application id or url of the web application\n * @param {String} channelUri The URI of the channel to connect to.\n * @returns {Application}\n *\n * @example\n var application = service.application('http://mydomain/myapp/', 'com.mydomain.myapp');\n */\nService.prototype.application = function(id, channelUri){\n\n    return new Application(this, id, channelUri);\n\n};\n\n/**\n * creates a channel of the service ('mychannel')\n *\n * @param {String} uri The uri of the Channel\n * @returns {Channel}\n *\n * @example\n var channel = service.channel('com.mydomain.myapp');\n */\nService.prototype.channel = function(uri){\n\n    return new Channel(this, uri);\n\n};\n\n\n/***\n * Retrieves a reference to the service running on the current device\n * (public api should use msf.local)\n *\n * @protected\n *\n * @param {Function} callback The callback handler\n * @param {Error} callback.err The callback handler\n * @param {Service} callback.service The service instance\n *\n */\nService.getLocal = function(callback){\n\n    Service.getByURI('http://127.0.0.1:8001/api/v2/', callback);\n\n};\n\n/***\n * Retrieves a service instance by it's uri\n * (public api should use msf.remote)\n *\n * @protected\n *\n * @param {String} uri The uri of the service (http://<ip>:<port>/api/v2/)\n * @param {Function} callback The callback handler\n * @param {Error} callback.err The callback handler\n * @param {Service} callback.service The service instance\n *\n */\nService.getByURI = function(uri, callback){\n\n    var oReq = new XMLHttpRequest();\n    oReq.timeout = 5000;\n    oReq.ontimeout = function(){callback();};\n    oReq.onload = function() {\n\n        if(this.status === 200){\n            try{\n                var result = JSON.parse(this.responseText);\n                callback(null, new Service(result));\n            }catch(e){  callback(e); }\n        }else{\n            callback();\n        }\n    };\n    oReq.open(\"get\", uri, true);\n    oReq.send();\n\n};\n\n\nmodule.exports = Service;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/Service.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util = require(\"./util\");\nvar props = util.props;\nvar EventEmitter = require('./EventEmitter');\n\n\n/**\n * Provides members related to {@link Service} discovery.\n *\n * @class Search\n * @extends EventEmitter\n * @hide-constructor\n *\n */\n\nfunction Search(){\n\n\n    Search.super_.call(this);\n\n    this.discoveryFrame = null;\n    this.status = Search.STATUS_STOPPED;\n\n    var self = this;\n\n    /* Create the discovery iframe and load the search page */\n\n    var frame = document.createElement('iframe');\n    frame.setAttribute('width', '1');\n    frame.setAttribute('height', '1');\n    frame.style.display = \"none\";\n    frame.src = 'http://multiscreen.samsung.com/discoveryservice/v2/discover';\n    document.body.appendChild(frame);\n\n    /* Add a 'message' listener to the window that checks incoming messages */\n\n    this.windowMessageListener = function(event){\n\n        if(event.source === frame.contentWindow){\n\n            // ready message\n            if(event.data && event.data.event === 'discovery.ready'){\n                self.discoveryFrame = event.source;\n                self.onSearchReady();\n            }\n\n            // result message\n            else if(event.data && event.data.event === 'discovery.result'){\n                var results = [];\n                var Service = require('./Service');\n                for(var i=0; i<event.data.result.length; i++){\n                    results.push(new Service(event.data.result[i]));\n                }\n                self.onSearchResult(results);\n            }\n\n            // error message\n            else if(event.data && event.data.event === 'discovery.error'){\n                self.onSearchError(event.data.error);\n                this.status = Search.STATUS_STOPPED;\n            }\n        }\n    };\n    window.addEventListener('message', this.windowMessageListener);\n\n    props.private(this,['discoveryFrame','windowMessageListener']);\n\n}\n\nutil.inherits(Search, EventEmitter);\n\n\n/***\n * @constant {string}\n * @private\n */\nSearch.STATUS_STOPPED = 'stopped';\n\n/***\n * @constant {string}\n * @private\n */\nSearch.STATUS_STARTED = 'started';\n\n\n/**\n * Starts the search, looking for devices it can reach on the network\n * If a search is already in progress it will NOT begin a new search\n *\n * @example\n *\n * var search = msf.search();\n * search.on('found', function(service){\n *    console.log('found service '+service.name);\n * }\n * search.start();\n *\n */\nSearch.prototype.start = function(){\n    if(this.status === Search.STATUS_STOPPED){\n        if(this.discoveryFrame){\n            this.discoveryFrame.postMessage({method:'discovery.search'}, \"*\");\n        }else{\n            var self = this;\n            this.once('ready',function(){\n                self.discoveryFrame.postMessage({method:'discovery.search'}, \"*\");\n            });\n        }\n        this.onSearchStart();\n    }else{\n        console.warn('a previous search is already in progress');\n    }\n};\n\n/**\n * Stops the current search in progress (no 'found' events or search callbacks will fire)\n *\n * @example\n * search.stop();\n *\n */\nSearch.prototype.stop = function(){\n    this.onSearchStop();\n};\n\nSearch.prototype.onSearchReady = function(){\n    this.emit('ready');\n};\n\n\n/**\n * Fired when a search has discovered compatible services\n *\n * @event Search#found\n * @type {Array}\n * @example\n * search.on('found', function(service){\n *    console.log('found '+service.name);\n * });\n */\n\n\nSearch.prototype.onSearchResult = function(results){\n    if(this.status !== Search.STATUS_STOPPED){\n        this.emit('found',results);\n    }\n    this.status = Search.STATUS_STOPPED;\n};\n\n\n/**\n * Fired when a search error has occurred\n *\n * @event Search#error\n * @type {Error}\n * @example\n * search.on('error', function(err){\n *    console.error('something went wrong', err.message);\n * });\n */\n\nSearch.prototype.onSearchError = function(error){\n    this.emit('error',error);\n    this.status = Search.STATUS_STOPPED;\n};\n\n/**\n * Fired when a search has been started\n *\n * @event Search#start\n * @type {Search}\n *\n * @example\n * search.on('start', function(){\n *    ui.setState('searching');\n * });\n */\nSearch.prototype.onSearchStart = function(){\n    this.status = Search.STATUS_STARTED;\n    this.emit('start', this);\n};\n\n/**\n * Fired when a search has been stopped\n *\n * @event Search#stop\n * @type {Search}\n * @example\n * search.on('stop', function(){\n *    ui.setState('stopped');\n * });\n */\nSearch.prototype.onSearchStop = function(){\n    this.status = Search.STATUS_STOPPED;\n    this.emit('stop', this);\n};\n\n\nmodule.exports = Search;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/Search.js\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = {\n\n    logger      : require('./logger'),\n    url         : require('./url'),\n    inherits    : require('./inherits'),\n    props       : require('./props'),\n    types       : require('./types'),\n    queryString : require('./querystring')\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/index.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util    = require(\"./util\");\nvar logger  = util.logger;\nvar types   = util.types;\nvar props   = util.props;\nvar Channel = require('./Channel');\n\n\nvar TYPE_APP = 'applications';\nvar TYPE_WEB_APP = 'webapplication';\n\n\n/**\n * An Application represents an application on the remote device.\n * Use the class to control various aspects of the application such launching the app or getting information\n *\n * @class Application\n * @extends Channel\n *\n * @param {Service} service the underlying service\n * @param {String} id can be an installed app id or url for a webapp\n * @param {String} channelURI a unique channel id (com.myapp.mychannel)\n *\n * @hide-constructor\n */\n\nfunction Application(service, id, channelURI){\n\n    /* Type checking */\n    if(!types.isObject(service)) throw new TypeError('service must be of type Service');\n    if(!types.isString(id)) throw new TypeError('id must be a valid string');\n    if(!types.isString(channelURI)) throw new TypeError('channelId must be a valid string');\n\n    /***\n     * The type of application (web application or installable app)\n     * @member {String} Application#type\n     * @private\n     */\n    this.type = id.match(/(file:\\/\\/|http(s)?:\\/\\/)/gmi) ? TYPE_WEB_APP : TYPE_APP;\n\n    /* Super Constructor */\n    Application.super_.call(this, service, channelURI);\n\n\n    /**\n     * The id of the application (this can be a url or installed application id)\n     * @member {String} Application#id\n     * @readonly\n     */\n    this.id = id;\n\n\n    /***\n     * The underlying of the application\n     * @member {String} Application#service\n     * @private\n     */\n    this.service = service;\n\n\n    /*\n    Listen for clientDisconnect events and disconnect if host disconnects\n    */\n    this.on('clientDisconnect', function(client){\n        if(client.isHost) this.disconnect();\n    }.bind(this));\n\n    /*\n     Turn off emitting the connect event from super as the application will provide its own\n    */\n    this.disableEvent('connect');\n\n\n    props.readOnly(this,'id');\n    props.private(this,'type','service');\n\n}\n\nutil.inherits(Application, Channel);\n\n\n\n/**\n * Starts and connects to the application on the remote device. Similar to the Channel 'connect' method but\n * within an Application the 'connect' callback and event will be only be called when the remote application has\n * launched and is ready to receive messages.\n *\n * @param {Object} attributes Any attributes to attach to your client\n * @param {Function} callback The callback handler\n * @param {Error} callback.error Any error that may have occurred during the connection or application startup\n * @param {Client} callback.client Your client object\n *\n * @example\n * app.connect({displayName:'Wheezy'},function(err, client){\n *   if(err) return console.error('something went wrong : ', error.code, error.message);\n *   console.info('You are now connected');\n * });\n */\nApplication.prototype.connect = function(attributes, callback){\n\n    if(!types.isObject(attributes)) throw new TypeError('attributes must be a valid object');\n    if(!types.isFunction(callback)) throw new TypeError('callback must be a valid function');\n\n    /*\n     This gets a little tricky because in an app instance we dont want connect to fire until the remote device is connected.\n     We also want to start the remote application and provide any errors from the launch\n     so we need to block the connect event from Channel, start the app, wait for the host to connect, have ready event (deprecated) trigger connect event.\n     */\n\n   this.start(function(err){\n\n       // If there was an issue starting the app callback with the error and stop execution\n       if(err) return callback(err);\n\n       // Call connect on the super\n       Channel.prototype.connect.call(this, attributes, function(err, client){\n\n           if(err) return callback(err);\n\n           // Set the connected flag to false until ready event fires\n           this.connected = false;\n\n           // Create a once listener for the ready event that will make the final callback and fire the connect event\n           var readyHandler = function(){\n\n               // Set the connected property\n               this.connected = true;\n\n               // call the connect callback\n               if(callback) {\n                   logger.debug('application.connect->callback', null, client);\n                   callback(null, client);\n               }\n\n               // enable the connect event, fire it, disable it again\n               logger.debug('application.emit(\"connect\")', client);\n               this.enableEvent('connect');\n               this.emit('connect',client);\n               this.disableEvent('connect');\n\n           }.bind(this);\n\n           // Listen once for the ready event\n           this.once('ready',readyHandler);\n\n       }.bind(this));\n\n   }.bind(this));\n\n};\n\n/**\n * Disconnects your client from the remote application.\n * If the first argument is an optional param and can be used close the remote application\n * The stop/exit command is only sent if you are the last connected client\n *\n * @param {Boolean} [exitOnRemote=true] Issues a stop/exit on the remote application before disconnecting\n * @param {Function} [callback] The callback handler\n * @param {Error} callback.error Any error that may have occurred during the connection or application startup\n * @param {Client} callback.client Your client object\n *\n * @example\n * app.disconnect(function(err){\n *     if(err) return console.error('something went wrong');\n *     console.info('You are now disconnected');\n * });\n */\nApplication.prototype.disconnect = function(exitOnRemote, callback){\n\n    if(types.isFunction(exitOnRemote)){\n        callback = exitOnRemote;\n        exitOnRemote = true;\n    }\n\n    if(types.isUndefined(exitOnRemote)) exitOnRemote = true;\n\n\n    if(exitOnRemote && this.clients.length <= 2) {\n\n        var stopCallback = function(err){\n            // still disconnect even if there was an error\n            Channel.prototype.disconnect.call(this, callback);\n        }.bind(this);\n\n        if(this.type === 'webapplication'){\n            this.invoke('ms.webapplication.stop', { url : this.id }, stopCallback);\n        }else{\n            this.invoke('ms.application.stop', { id : this.id }, stopCallback);\n        }\n\n    }else{\n        Channel.prototype.disconnect.call(this, callback);\n    }\n\n};\n\n/**\n * Installs the application on the remote device.\n *\n * @param {Function} callback The callback handler\n * @param {Function} callback.err The callback handler\n *\n * @example\n *  app.connect({name:'Jason'}, function(err, client){\n *    if(err.code === 404){\n *      var install = confirm('Would you like to install the MyApp on your TV?');\n *      if(install){\n *         app.install(function(err){\n *            alert('Please follow the prompts on your TV to install the application');\n *         });\n *     }\n *   }\n *  });\n */\nApplication.prototype.install = function(callback){\n\n    if(this.type === TYPE_WEB_APP) return callback(new Error('web application cannot be installed'));\n\n    var e;\n    var req = new XMLHttpRequest();\n    req.timeout = 10000;\n\n    req.ontimeout = function(){\n        e = new Error('Request Timeout');\n        e.code = 408;\n        callback(e);\n    };\n\n    req.onload = function() {\n        if(this.status === 200){\n            callback(null, true);\n        }\n        else {\n            e = new Error(this.statusText);\n            e.code = this.status;\n            callback(e);\n        }\n    };\n\n    req.open(\"get\", this.service.uri + 'applications/'+this.id, true);\n    req.send();\n\n};\n\n\n/***\n * Starts the application on the remote device.\n *\n * @private\n *\n * @param {Function} callback The callback handler\n * @param {Function} callback.err The callback handler\n *\n */\nApplication.prototype.start = function(callback){\n\n    var e;\n\n    var req = new XMLHttpRequest();\n    req.timeout = 10000;\n\n    req.ontimeout = function(){\n        e = new Error('Request Timeout');\n        e.code = 408;\n        callback(e);\n    };\n\n    req.onload = function() {\n        if(this.status === 200){\n            callback(null, true);\n        }\n        else {\n            e = new Error(this.statusText);\n            e.code = this.status;\n            callback(e);\n        }\n    };\n\n    if(this.type === TYPE_WEB_APP){\n        req.open(\"post\", this.service.uri + 'webapplication/', true);\n        req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        req.send(JSON.stringify({url:this.id}));\n    }else{\n        req.open(\"post\", this.service.uri + 'applications/'+this.id, true);\n        req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        req.send(JSON.stringify({}));\n    }\n\n\n};\n\n\n\nmodule.exports = Application;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/Application.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util    = require(\"./util\");\nvar logger  = util.logger;\nvar types   = util.types;\nvar props   = util.props;\nvar EventEmitter = require('./EventEmitter');\nvar Client = require('./Client');\nvar ClientList = require('./ClientList');\n\nvar EVENT_HEALTH_CHECK = '__ping';\n\n\n/**\n * A Channel is a discreet connection where multiple clients can communicate\n * @class Channel\n * @extends EventEmitter\n *\n * @hide-constructor\n */\nfunction Channel(service, uri){\n\n    logger.debug('new Channel',arguments);\n\n    /* Type checking */\n    if(!types.isObject(service)) throw new TypeError('service must be of type Service');\n    if(!types.isString(uri)) throw new TypeError('uri must be a valid string');\n\n    /* Super Construction */\n    Channel.super_.call(this);\n\n    var self = this;\n    var oServiceUrl = util.url.parse(service.uri);\n\n\n    /***\n     * The connected state of the channel (a backing variable to isConnected)\n     * @protected\n     */\n    this.connected = false;\n\n    /***\n     * The id assigned to your client upon connection\n     * @private\n     */\n    this.clientId = null;\n\n    /***\n     * The underlying web socket connection\n     * @private\n     */\n    this.connection = null;\n\n    /***\n     * A map of message handler still waiting for responses\n     * @private\n     */\n    this.resultHandlers = {};\n\n    /***\n     * The url for the websocket to connect to\n     * @private\n     */\n    this.connectionUrl = 'ws://' + oServiceUrl.host + oServiceUrl.pathname + 'channels/' + uri;\n\n    /***\n     * The time in milliseconds between pings if a connection timeout is defined\n     * @private\n     */\n    this.pingTimeout = null;\n\n    /***\n     * The 'interval' reference set with setConnectionTimeout\n     * @private\n     */\n    this.pingInterval = null;\n\n\n    /**\n     * The collection of clients currently connected to the channel\n     *\n     * @member {ClientList} Channel#clients\n     * @readonly\n     *\n     */\n    this.clients = new ClientList(this);\n\n    /**\n     * The connection status of the channel\n     *\n     * @member {Boolean} Channel#isConnected\n     * @readonly\n     *\n     */\n    Object.defineProperty(this, 'isConnected', {\n        get : function(){\n            return self.connected;\n        }\n    });\n\n\n    /**\n     * Sets the connection timeout. When set the channel will utilize a connection health check while connected.\n     * If no pinging health check is not received within the given timeout the connection will close.\n     * To stop the health check set the timeout to 0\n     *\n     * @member {Boolean} Channel#connectionTimeout\n     *\n     * @example\n     * channel.connectionTimeout = 10000; // checks the connection every 10 seconds while connected\n     * channel.connectionTimeout = 0; // stops the health check\n     */\n    Object.defineProperty(this, 'connectionTimeout', {\n        set : function(timeout){\n            logger.debug('updating connection timeout ',timeout);\n            self.pingTimeout = timeout > 0 ? timeout : 0;\n            // If we are already connected start the check\n            if(this.isConnected) self.startHealthCheck();\n        },\n        get : function(){\n            return self.pingTimeout;\n        }\n    });\n\n\n\n    /* setup health check listeners */\n    this.on('connect', this.startHealthCheck);\n    this.on('disconnect', this.stopHealthCheck);\n\n\n    /* configure access and enumeration of properties */\n    props.readOnly(this, ['clients']);\n    props.private(this, [\n        'connected',\n        'clientId',\n        'connection',\n        'resultHandlers',\n        'connectionUrl',\n        'connectCallback',\n        'pingInterval',\n        'pingTimeout',\n        'lastPingReceived'\n    ]);\n\n}\n\n\nutil.inherits(Channel, EventEmitter);\n\n\n\n/**\n * Connects to the channel\n *\n * @param {Object} attributes Any attributes you want to associate with the client (ie. {name:\"FooBar\"}\n * @param {Function} callback The success callback handler\n * @param {Error} callback.arg1 Any error that may have occurred\n * @param {Client} callback.arg2 The connecting client\n *\n * @example\n * channel.connect({name:'Wheezy'},function(err, client){\n *   if(err) return console.error('something went wrong : ', error.code, error.message);\n *   console.info(client.attributes.name+', you are now connected');\n * });\n */\nChannel.prototype.connect = function(attributes, callback){\n\n    logger.debug('channel.connect',arguments);\n    if(this.isConnected) return console.warn('Channel is already connected.');\n\n    if(types.isFunction(attributes) && !callback){\n        callback = attributes;\n        attributes = {};\n    }else{\n        attributes = attributes || {};\n    }\n\n    // Validate arguments and connection state\n    if(!types.isObject(attributes))throw new TypeError('attributes must be a valid object');\n    if(callback && !types.isFunction(callback))throw new TypeError('callback must be a valid function');\n\n\n    // Store the callback\n    this.connectCallback = callback;\n\n    // TODO : Need to merge query string just in case the connection url already has a query (although it shouldn't)\n    var u = this.connectionUrl + '?' + util.queryString.stringify(attributes);\n\n    // Clean up any old connections\n    if(this.connection){\n        this.connection.onopen = null;\n        this.connection.onerror = null;\n        this.connection.onclose = null;\n        this.connection.onmessage = null;\n    }\n\n    // Connect the websocket and add our listeners\n    this.connection = new WebSocket(u);\n    this.connection.binaryType = \"arraybuffer\";\n    this.connection.onopen = this._onSocketOpen.bind(this);\n    this.connection.onerror = this._onSocketError.bind(this);\n    this.connection.onclose = this._onSocketClose.bind(this);\n    this.connection.onmessage = this._onSocketMessage.bind(this);\n};\n\n/**\n * Disconnects from the channel\n *\n * @param {Function} callback The success callback handler\n * @param {Error} callback.error Any error that may have occurred\n * @param {Client} callback.client The disconnecting client\n *\n * @example\n * channel.disconnect(function(err, client){\n *   if(err) return console.error('something went wrong : ', error.code, error.message);\n *   console.info(client.attributes.name+', you are now disconnected');\n * });\n */\nChannel.prototype.disconnect = function(callback){\n\n    logger.debug('channel.disconnect',arguments);\n    if(!this.isConnected) console.warn(\"channel is already disconnected\");\n\n    this.connection.close();\n    var self = this;\n    setTimeout(function(){\n        if(callback) callback(null, self);\n    },0);\n\n};\n\n/**\n * Publish an event message to the specified target or targets.\n * Targets can be in the for of a clients id, an array of client ids or one of the special message target strings (ie. \"all\" or \"host\"}\n *\n * @param {String} event The name of the event to emit\n * @param {any} [message] Any data associated with the event\n * @param {String|Array} [target='broadcast'] The target recipient(s) of the message\n * @param {Blob|ArrayBuffer} [payload] Any binary data to send with the message\n *\n * @example\n * channel.publish('myCustomEventName',{custom:'data'});\n */\nChannel.prototype.publish = function(event, message, target, payload){\n\n    logger.silly('channel.publish',arguments);\n    if(!this.isConnected) return console.warn('Channel is not connected.');\n\n    target = target || 'broadcast';\n    message = message || null;\n\n\n    if(!types.isString(event))throw new TypeError('event must be a valid string');\n    if(!(types.isString(target) || types.isArray(target))) throw new TypeError('targets must be a valid string or array');\n\n    this.invoke('ms.channel.emit',{\n        event   : event,\n        data    : message,\n        to      : target\n    }, null, true, payload);\n\n};\n\n\n\n\n/*\n Packs messages with payloads into binary message\n */\nChannel.packMessage = function(oMsg, payload){\n\n    logger.debug('channel.packMessage',arguments);\n\n    // convert js object to string\n    var msg = JSON.stringify(oMsg);\n\n    // get byte length of the string\n    var msgByteLength = new Blob([msg]).size;\n\n    // create 2 byte header which contains the length of the string (json) message\n    var hBuff = new ArrayBuffer(2);\n    var hView = new DataView(hBuff);\n    hView.setUint16(0,msgByteLength);\n\n    // binary packed message and payload\n    return new Blob([hBuff, msg, payload]);\n\n};\n\n/*\n Unpacks binary messages\n */\nChannel.unpackMessage = function(buffer){\n\n    logger.debug('channel.unpackMessage',arguments);\n\n    var json = '';\n    var view = new DataView(buffer);\n    var msgByteLen = view.getUint16(0);\n\n    for (var i = 0; i < msgByteLen; i++) {\n        json += String.fromCharCode(view.getUint8(i+2));\n    }\n\n    var payload = buffer.slice(2+msgByteLen);\n    var message = JSON.parse(json);\n\n    return {payload : payload, message : message};\n\n};\n\n\n\n/***\n * Invokes and RPC method on the server\n *\n * @protected\n *\n * @param {String} method The name of the method to invoke\n * @param {Object} params Named params to pass to the method\n * @param {Function} [callback] The success callback handler\n * @param {Error} callback.error Any error that may have occurred\n * @param {Boolean} callback.success\n * @param {Boolean} [isNotification=false] If true the message will have no id and no response handler will be stored\n * @param {ArrayBuffer|Blob} [payload] Any binary data to send along with the message\n *\n */\nChannel.prototype.invoke = function(method, params, callback, isNotification, payload){\n\n    logger.debug('channel.invoke',arguments);\n\n    if(!types.isString(method))throw new TypeError('method must be a valid string');\n\n    params = params || {};\n\n    var msg = {\n        method  : method,\n        params  : params\n    };\n\n    if(callback && !isNotification){\n        msg.id = Date.now();\n        this.resultHandlers[msg.id] = callback;\n    }\n\n    if(payload){\n        msg = Channel.packMessage(msg,payload);\n    }else{\n        msg = JSON.stringify(msg);\n    }\n\n    this.connection.send(msg);\n};\n\n/**\n * Fired when a channel makes a connection\n *\n * @event Channel#connect\n * @param {Client} client - Your client\n * @example\n * channel.on('connect',function(client){\n *  console.log('You are now connected');\n * });\n */\nChannel.prototype._onConnect = function(data) {\n\n    logger.silly('channel._onConnect');\n\n    this.connected = true;\n\n    // Store my id\n    this.clientId = data.id;\n\n    // Store the current connected client\n    data.clients.forEach(function(clientInfo){\n\n        // Create a client and add to our list\n        var client = new Client(clientInfo.id, clientInfo.attributes, clientInfo.isHost);\n        this.clients.push(client);\n\n    },this);\n\n    // call the connect callback if present and reset\n    if(this.connectCallback) {\n        logger.debug('channel.connect->callback',this.clients.me);\n        this.connectCallback(null, this.clients.me);\n        this.connectCallback = null;\n    }\n\n\n    logger.debug('channel.emit(\"connect\")',this.clients.me);\n    this.emit('connect',this.clients.me);\n\n};\n\n\n/**\n * Fired when a channel disconnects\n *\n * @event Channel#disconnect\n * @param {Client} client - Your client\n * @example\n * channel.on('disconnect',function(client){\n *  console.log('You are now disconnected');\n * });\n */\nChannel.prototype._onDisconnect = function(data) {\n    logger.silly('channel._onDisconnect');\n\n    if(this.connected){\n        var client = this.clients.me;\n        this.clients.clear();\n\n        logger.debug('channel.emit(\"disconnect\")',client);\n        this.emit('disconnect',client);\n    }\n    this.connected = false;\n\n\n};\n\n\n/**\n * Fired when a peer client channel makes a connection\n *\n * @event Channel#clientConnect\n * @param {Client} client - The client that connected\n * @example\n * channel.on('clientConnect',function(client){\n *  console.log(client.id + 'is now connected');\n * });\n */\nChannel.prototype._onClientConnect = function(data) {\n    logger.silly('channel._onClientConnect');\n\n    var client = new Client(data.id, data.attributes, data.isHost);\n    this.clients.push(client);\n\n    logger.debug('channel.emit(\"clientConnect\")',client);\n    this.emit('clientConnect',client);\n};\n\n/**\n * Fired when a peer client disconnects\n *\n * @event Channel#clientDisconnect\n * @param {Client} client - The client that connected\n * @example\n * channel.on('clientDisconnect',function(client){\n *  console.log(client.id + 'has disconnected');\n * });\n */\nChannel.prototype._onClientDisconnect = function(data) {\n    logger.silly('channel._onClientDisconnect');\n\n    var client = this.clients.getById(data.id);\n    if(client) this.clients.remove(client);\n    else {\n        logger.warn('client '+data.id+' could not be found, so it was not removed from the client list');\n        client = new Client(data.id, data.attributes, data.isHost);\n    }\n\n\n    logger.debug('channel.emit(\"clientDisconnect\")',client);\n    this.emit('clientDisconnect',client);\n\n};\n\n/***\n * Fired when the host has connected and is ready to accept messages\n * @deprecated since version 2.0.18 (please use the connect event)\n *\n * @event Channel#ready\n */\nChannel.prototype._onReady = function(data){\n\n    logger.debug('channel.emit(\"ready\")');\n    this.emit('ready');\n};\n\nChannel.prototype._onUserEvent = function(msg){\n\n    var client = this.clients.getById(msg.from);\n    var event = msg.event;\n    var data  = msg.data;\n    var payload = msg.payload;\n\n    logger.debug('channel.emit(\"'+event+'\")',data, client, payload);\n    this.emit(event, data, client, payload);\n};\n\nChannel.prototype._onSocketOpen = function() {\n    logger.silly('channel._onSocketOpen');\n};\n\nChannel.prototype._onSocketClose = function() {\n    logger.silly('channel._onSocketClose');\n    this._onDisconnect();\n};\n\nChannel.prototype._onSocketError = function(e) {\n    logger.silly('channel._onSocketError',e);\n    this.emit('error', new Error(\"WebSocket error\"));\n};\n\n\nChannel.prototype._onSocketMessage = function(msg){\n\n    logger.silly('channel._onSocketMessage',msg);\n\n    // Serialize the message\n    try{\n        if(typeof msg.data === \"string\"){\n            msg = JSON.parse(msg.data);\n        }else{\n            var unpacked = Channel.unpackMessage(msg.data);\n            msg = unpacked.message;\n            msg.payload = unpacked.payload;\n        }\n    } catch (e) {\n        logger.warn('unable to parse message', msg);\n        return;\n    }\n\n    // RPC Response?\n    if(msg.id && (msg.result || msg.error)){\n\n        if(!this.resultHandlers[msg.id]){\n            logger.warn('unable to find result handler for result message ', msg);\n            return;\n        }\n\n        this.resultHandlers[msg.id](msg.error,msg.result);\n\n    }\n    // Event?\n    else if (msg.event){\n\n        switch(msg.event){\n\n            case 'ms.channel.connect' :\n                this._onConnect(msg.data);\n                break;\n\n            case 'ms.channel.clientConnect' :\n                this._onClientConnect(msg.data);\n                break;\n\n            case 'ms.channel.clientDisconnect' :\n                this._onClientDisconnect(msg.data);\n                break;\n\n            case 'ms.channel.ready' :\n                this._onReady(msg.data);\n                break;\n\n            default :\n                this._onUserEvent(msg);\n                break;\n        }\n    }\n    // Unrecognized\n    else{\n        logger.warn('unrecognized message type', msg);\n    }\n\n};\n\nChannel.prototype.startHealthCheck = function(){\n\n    // stop any previous health checking\n    this.stopHealthCheck();\n\n    if(this.pingTimeout > 0){\n\n        var lastReceivedPing = null;\n\n        this.on(EVENT_HEALTH_CHECK, function(sent){\n            lastReceivedPing = Date.now();\n            logger.debug('ping trip : ',lastReceivedPing - sent);\n            logger.debug('updated last ping time : ',lastReceivedPing);\n        });\n\n        var checkAndPing = function(){\n\n            var now = Date.now();\n            if(!lastReceivedPing) lastReceivedPing = now;\n\n            if(now - lastReceivedPing < this.pingTimeout){\n                logger.debug('sending ping');\n                this.publish(EVENT_HEALTH_CHECK, now, this.clients.me.id);\n            }else{\n                logger.debug('ping timed, out closing connection');\n                this.stopHealthCheck();\n                if(this.connection){\n                    this.connection.close();\n                    // forcing disconnect\n                    this._onDisconnect();\n                }\n            }\n        }.bind(this);\n\n        // start the timer\n        this.pingInterval = setInterval(checkAndPing,this.pingTimeout);\n    }\n\n\n\n};\n\nChannel.prototype.stopHealthCheck = function(){\n    clearInterval(this.pingInterval);\n    this.removeAllListeners(EVENT_HEALTH_CHECK);\n};\n\n\nmodule.exports = Channel;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/Channel.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nvar levels = ['error','warn','info','verbose','debug','silly'];\n\nvar logger = {\n\n    level : 'disabled',\n\n    log : function(level /* ,....args*/){\n        if(logger.level !== 'disabled' && (levels.indexOf(level) <= levels.indexOf(logger.level))){\n            var args = Array.prototype.slice.call(arguments,1);\n            args.unshift('[MSF:'+level.toUpperCase()+']');\n            if(console[level]){\n                console[level].apply(console,args);\n            }else{\n                console.log.apply(console,args);\n            }\n\n        }\n    }\n\n};\n\nfunction createLevel(level){\n    return function(/*args*/){\n        var args = Array.prototype.slice.call(arguments);\n        args.unshift(level);\n        logger.log.apply(logger,args);\n    };\n}\n\n// Create logger methods based on levels\nfor(var i=0; i<levels.length; i++){\n    var level = levels[i];\n    logger[level] = createLevel(level);\n}\n\nmodule.exports = logger;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/logger.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\nvar queryString = require('./querystring');\n\nvar url = {\n\n    isValid : function(u){\n\n        var pattern = /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\n        return u.match(pattern) ? true : false;\n    },\n\n    parse : function(u){\n\n        var oUrl = {};\n        var parser = document.createElement('a');\n        parser.href = u; // \"http://example.com:3000/pathname/?search=test#hash\";\n\n        oUrl.href = parser.href; // => \"http://ip:port/path/page?query=string#hash\"\n        oUrl.protocol = parser.protocol; // => \"http:\"\n        oUrl.hostname = parser.hostname; // => \"example.com\"\n        oUrl.port = parser.port;     // => \"3000\"\n        oUrl.pathname = parser.pathname; // => \"/pathname/\"\n        oUrl.search = parser.search;   // => \"?search=test\"\n        oUrl.hash = parser.hash;     // => \"#hash\"\n        oUrl.host = parser.host;     // => \"example.com:3000\"\n        oUrl.queryString = queryString.parse(parser.search);\n\n        return oUrl;\n    }\n\n\n};\n\nmodule.exports = url;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/url.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nif (typeof Object.create === 'function') {\n    // implementation from standard node.js 'util' module\n    module.exports = function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n                value: ctor,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n    };\n} else {\n    // old school shim for old browsers\n    module.exports = function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function () {};\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n    };\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/inherits.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nfunction createDescriptor(e,c,w,v){\n    return {\n        enumerable : e,\n        configurable : c,\n        writable : w,\n        value : v\n    };\n}\n\nmodule.exports = {\n\n    readOnly : function(obj, key){\n\n        if(Array.isArray(key)){\n            key.forEach(function(k){\n                Object.defineProperty(obj, k, createDescriptor(true,true,false,obj[k]));\n            });\n        }else{\n            Object.defineProperty(obj, key, createDescriptor(true,true,false,obj[key]));\n        }\n\n    },\n\n    private : function(obj, key){\n\n        if(Array.isArray(key)){\n            key.forEach(function(k){ Object.defineProperty(obj, k, createDescriptor(false,true,true,obj[k])); });\n        }else{\n            Object.defineProperty(obj, key, createDescriptor(false,true,true,obj[key]));\n        }\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/props.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = {\n\n    isString : function(obj){\n        return typeof obj === 'string';\n    },\n\n    isNull : function(obj){\n        return obj === null;\n    },\n\n    isBoolean : function(obj){\n        return typeof obj === 'boolean';\n    },\n\n    isNumber : function(obj){\n        return typeof obj === 'number';\n    },\n\n    isObject : function(obj){\n        return obj === Object(obj);\n    },\n\n    isArray : function(obj){\n        return obj.constructor === Array;\n    },\n\n    isFunction : function(obj){\n        return typeof obj === 'function';\n    },\n\n    isUndefined : function(obj){\n        return typeof obj === 'undefined';\n    }\n\n\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/types.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\n/*\n    Derived work from Sidre Sorhus (https://github.com/sindresorhus/query-string)\n */\n\n/*!\n query-string\n Parse and stringify URL query strings\n https://github.com/sindresorhus/query-string\n by Sindre Sorhus\n MIT License\n */\n\nvar queryString = {};\n\nqueryString.parse = function (str) {\n    if (typeof str !== 'string') {\n        return {};\n    }\n\n    str = str.trim().replace(/^(\\?|#)/, '');\n\n    if (!str) {\n        return {};\n    }\n\n    return str.trim().split('&').reduce(function (ret, param) {\n        var parts = param.replace(/\\+/g, ' ').split('=');\n        var key = parts[0];\n        var val = parts[1];\n\n        key = decodeURIComponent(key);\n        // missing `=` should be `null`:\n        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n        val = val === undefined ? null : decodeURIComponent(val);\n\n        if (!ret.hasOwnProperty(key)) {\n            ret[key] = val;\n        } else if (Array.isArray(ret[key])) {\n            ret[key].push(val);\n        } else {\n            ret[key] = [ret[key], val];\n        }\n\n        return ret;\n    }, {});\n};\n\nqueryString.stringify = function (obj) {\n    return obj ? Object.keys(obj).map(function (key) {\n        var val = obj[key];\n\n        if (Array.isArray(val)) {\n            return val.map(function (val2) {\n                return encodeURIComponent(key) + '=' + encodeURIComponent(val2);\n            }).join('&');\n        }\n\n        return encodeURIComponent(key) + '=' + encodeURIComponent(val);\n    }).join('&') : '';\n};\n\nmodule.exports = queryString;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util/querystring.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util = require(\"./util\");\nvar types = util.types;\n\n\n/**\n * A representation of an individual device or user connected to a channel.\n * Clients can have user defined attributes that are readable by all other clients.\n * @class Client\n *\n * @hide-constructor\n *\n */\nfunction Client(id, attributes, isHost, connectTime){\n\n    if(!types.isString(id)) throw new TypeError('id must be a valid string');\n    if(attributes && !types.isObject(attributes)) throw new TypeError('attributes must be a valid object');\n\n    /**\n     * The id of the client\n     *\n     * @name id\n     * @memberOf Client.prototype\n     * @type {String}\n     * @readonly\n     *\n     */\n    this.id = id;\n\n    /**\n     * A map of attributes passed by the client when connecting\n     *\n     * @name attributes\n     * @memberOf Client.prototype\n     * @type {Object}\n     * @readonly\n     *\n     */\n    this.attributes = attributes || {};\n\n    /**\n     * Flag for determining if the client is the host\n     *\n     * @name isHost\n     * @memberOf Client.prototype\n     * @type {Boolean}\n     * @readonly\n     *\n     */\n    this.isHost = isHost;\n\n    /**\n     * The time which the client connected in epoch milliseconds\n     *\n     * @name connectTime\n     * @memberOf Client.prototype\n     * @type {Number}\n     * @readonly\n     *\n     */\n    this.connectTime = connectTime || Date.now();\n\n    Object.freeze(this.attributes);\n    Object.freeze(this);\n\n}\n\nmodule.exports = Client;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/Client.js\n ** module id = 14\n ** module chunks = 0\n **/","\"use strict\";\n\nvar util = require(\"./util\");\nvar types = util.types;\n\n/**\n * A list of {@link Client|clients} accessible through {@link Channel#clients|channel.clients}.\n * This list is managed by the channel and automatically adds and removes clients as they connect and disconnect\n * @class ClientList\n * @extends Array\n * @hide-constructor\n */\n\nfunction ClientList(channel){\n\n    if(!types.isObject(channel))throw new TypeError('channel must be of type Channel');\n\n    this.channel = channel;\n\n    ClientList.super_.call(this);\n\n}\n\nutil.inherits(ClientList, Array);\n\n/**\n * A reference to your client\n *\n * @member {Client} ClientList#me\n * @readonly\n */\nObject.defineProperty(ClientList.prototype, 'me', {\n    get : function(){\n        return this.getById(this.channel.clientId);\n    }\n});\n\n/***\n * Clears the list\n * @protected\n */\nClientList.prototype.clear = function(){\n    this.length = 0;\n};\n\n/***\n * Removes an client from the list\n * @protected\n */\nClientList.prototype.remove = function(item){\n    var i = this.indexOf(item);\n    if(i !== -1) {\n        this.splice(i, 1);\n        return item;\n    }\n    return null;\n};\n\n\n/**\n * Returns a client by id\n *\n * @param {String} id The client\n * @return {Client}\n *\n */\nClientList.prototype.getById = function(id){\n\n    if(!types.isString(id) && !types.isNumber(id)) throw new TypeError('id must be a valid string or number');\n    for(var i=0; i<this.length; i++){\n        if(this[i].id === id) return this[i];\n    }\n    return null;\n};\n\n\nmodule.exports = ClientList;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/ClientList.js\n ** module id = 15\n ** module chunks = 0\n **/"],"sourceRoot":""}